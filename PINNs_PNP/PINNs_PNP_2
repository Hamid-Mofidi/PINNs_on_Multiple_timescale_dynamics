{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "79feb11b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T13:34:29.458659Z",
     "iopub.status.busy": "2024-06-09T13:34:29.458225Z",
     "iopub.status.idle": "2024-06-09T13:34:34.150167Z",
     "shell.execute_reply": "2024-06-09T13:34:34.149009Z"
    },
    "papermill": {
     "duration": 4.701984,
     "end_time": "2024-06-09T13:34:34.152820",
     "exception": false,
     "start_time": "2024-06-09T13:34:29.450836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from functools import partial\n",
    "from scipy.integrate import odeint\n",
    "from sympy import symbols, Eq, solve, Function, Matrix, diff\n",
    "\n",
    "# Define the ODE systems\n",
    "def fast_system(y, t, eps):\n",
    "    phi, u, c1, c2, j1, j2, w = y\n",
    "    dphidt = u \n",
    "    dudt   = -z1 * c1 - z2 * c2\n",
    "    dc1dt  = -z1 * c1 * u - eps * j1\n",
    "    dc2dt  = -z2 * c2 * u - eps * j2\n",
    "    dj1dt  = 0\n",
    "    dj2dt  = 0\n",
    "    dwdt   = eps\n",
    "    \n",
    "    return [dphidt, dudt, dc1dt, dc2dt, dj1dt, dj2dt, dwdt]\n",
    "\n",
    "\n",
    "def subfast_system(y, t, eps):\n",
    "    phi, u, c1, c2, j1, j2, w = y\n",
    "    dphidt = u \n",
    "    dudt   = -z1 * c1 - z2 * c2\n",
    "    dc1dt  = -z1 * c1 * u \n",
    "    dc2dt  = -z2 * c2 * u \n",
    "    dj1dt  = 0\n",
    "    dj2dt  = 0\n",
    "    dwdt   = 0\n",
    "    \n",
    "    return [dphidt, dudt, dc1dt, dc2dt, dj1dt, dj2dt, dwdt]\n",
    "\n",
    "\n",
    "\n",
    "t_end = 100\n",
    "t   =  np.linspace(0, t_end, 100)\n",
    "t2  =  np.linspace(0,-t_end, 100)\n",
    "eps = 0.001\n",
    "T_slow_end = 1\n",
    "tau = np.linspace(0, T_slow_end, 100)\n",
    "\n",
    "t_tensor = torch.tensor(t.reshape(-1, 1), dtype=torch.float64) \n",
    "tau_tensor = torch.tensor(tau.reshape(-1, 1), dtype=torch.float64)\n",
    "t2_tensor = torch.tensor(t2.reshape(-1, 1), dtype=torch.float64)\n",
    "\n",
    "\n",
    "def input_transform(t_tensor):\n",
    "    return torch.cat([t_tensor], dim=1)\n",
    "\n",
    "num_nrn = 7\n",
    "\n",
    "class fast_system_PINN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(fast_system_PINN, self).__init__()\n",
    "        self.fc1 = nn.Linear(1, num_nrn)\n",
    "        self.fc2 = nn.Linear(num_nrn, num_nrn)\n",
    "        self.fc3 = nn.Linear(num_nrn, 7)\n",
    "\n",
    "    def forward(self, t):\n",
    "        x = F.tanh(self.fc1(t))\n",
    "        x = F.tanh(self.fc2(x))\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "\n",
    "class slow_system_PINN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(slow_system_PINN, self).__init__()\n",
    "        self.fc1 = nn.Linear(1, num_nrn)\n",
    "        self.fc2 = nn.Linear(num_nrn, num_nrn)\n",
    "        self.fc3 = nn.Linear(num_nrn, 7)\n",
    "\n",
    "    def forward(self, tau):\n",
    "        x = F.tanh(self.fc1(tau))\n",
    "        x = F.tanh(self.fc2(x))\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "      \n",
    "class fast_system_PINN2(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(fast_system_PINN2, self).__init__()\n",
    "        self.fc1 = nn.Linear(1, num_nrn)\n",
    "        self.fc2 = nn.Linear(num_nrn, num_nrn)\n",
    "        self.fc3 = nn.Linear(num_nrn, 7)\n",
    "\n",
    "    def forward(self, t2):\n",
    "        x = F.tanh(self.fc1(t2))\n",
    "        x = F.tanh(self.fc2(x))\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ad90caa3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T13:34:34.169624Z",
     "iopub.status.busy": "2024-06-09T13:34:34.168291Z",
     "iopub.status.idle": "2024-06-09T13:34:34.174736Z",
     "shell.execute_reply": "2024-06-09T13:34:34.173599Z"
    },
    "papermill": {
     "duration": 0.018008,
     "end_time": "2024-06-09T13:34:34.177106",
     "exception": false,
     "start_time": "2024-06-09T13:34:34.159098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "z1, z2 = 1.0 , -1.0\n",
    "V  = -10\n",
    "l  = 1\n",
    "l1 , l2 = l , l\n",
    "\n",
    "r  = 2\n",
    "r1 , r2 = r , r\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2ed4e3c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T13:34:34.188945Z",
     "iopub.status.busy": "2024-06-09T13:34:34.188536Z",
     "iopub.status.idle": "2024-06-09T13:34:34.197996Z",
     "shell.execute_reply": "2024-06-09T13:34:34.196825Z"
    },
    "papermill": {
     "duration": 0.018946,
     "end_time": "2024-06-09T13:34:34.201099",
     "exception": false,
     "start_time": "2024-06-09T13:34:34.182153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The initial points of the BVP: phi_init = -10, c1_init  = 1, c2_init = 1, w_init   = 0.0 \n",
      "The ending points of the BVP: phi_end = 0.0, c1_end  = 2, c2_end = 2, w_end   = 1.0 \n"
     ]
    }
   ],
   "source": [
    "# Initial points:\n",
    "phi_init, c1_init, c2_init,  w_init = V, l1 , l2, 0.0  \n",
    "print('The initial points of the BVP:', f\"phi_init = {phi_init}, c1_init  = {c1_init}, c2_init = {c2_init}, w_init   = {w_init} \")\n",
    "\n",
    "phi_slow_init, phi_slow_end = V, 0.0\n",
    "c1_slow_init, c1_slow_end   = l1, r1 \n",
    "c2_slow_init, c2_slow_end  = l2, r2\n",
    "w_slow_init, w_slow_end  = 0.0, 1.0\n",
    "\n",
    "phi_end, c1_end, c2_end, w_end = 0.0, r1, r2 , 1.0\n",
    "print('The ending points of the BVP:', f\"phi_end = {phi_end}, c1_end  = {c1_end}, c2_end = {c2_end}, w_end   = {w_end} \")\n",
    " \n",
    "J1, J2    =  np.random.uniform(0, 1), np.random.uniform(0, 1)\n",
    "u_a, u_b =  0.0, 0.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "324e4fc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T13:34:34.213901Z",
     "iopub.status.busy": "2024-06-09T13:34:34.213467Z",
     "iopub.status.idle": "2024-06-09T13:34:34.264723Z",
     "shell.execute_reply": "2024-06-09T13:34:34.263262Z"
    },
    "papermill": {
     "duration": 0.062467,
     "end_time": "2024-06-09T13:34:34.268688",
     "exception": false,
     "start_time": "2024-06-09T13:34:34.206221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "phys_weight  = 1\n",
    "init_weight  = 1\n",
    "bndry_weight = 1\n",
    "def loss_func_fast(model, t_tensor, phi_init, c1_init, c2_init, w_init,\\\n",
    "                                    phi_slow_init, c1_slow_init, c2_slow_init, w_slow_init,\\\n",
    "                                    eps, random_points=10):\n",
    "    t_tensor.requires_grad = True\n",
    "    pred_fast = model(t_tensor)\n",
    "    phi_pred_fast, u_pred_fast = pred_fast[:, 0].unsqueeze(1), pred_fast[:, 1].unsqueeze(1)\n",
    "    c1_pred_fast, c2_pred_fast = pred_fast[:, 2].unsqueeze(1), pred_fast[:, 3].unsqueeze(1)\n",
    "    j1_pred_fast, j2_pred_fast = pred_fast[:, 4].unsqueeze(1), pred_fast[:, 5].unsqueeze(1)\n",
    "    w_pred_fast = pred_fast[:, 6].unsqueeze(1)\n",
    "    #ones = torch.ones_like(x_pred_fast, requires_grad=True)    \n",
    "    dphi_dt = torch.autograd.grad(phi_pred_fast.sum(), t_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    du_dt = torch.autograd.grad(u_pred_fast.sum(), t_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dc1_dt = torch.autograd.grad(c1_pred_fast.sum(), t_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dc2_dt = torch.autograd.grad(c2_pred_fast.sum(), t_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dj1_dt = torch.autograd.grad(j1_pred_fast.sum(), t_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dj2_dt = torch.autograd.grad(j2_pred_fast.sum(), t_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dw_dt = torch.autograd.grad(w_pred_fast.sum(), t_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    \n",
    "    #for the fast system\n",
    "    residual1_fast =  dphi_dt - u_pred_fast\n",
    "    residual2_fast =  du_dt + z1 * c1_pred_fast + z2 * c2_pred_fast\n",
    "    residual3_fast =  dc1_dt + z1 * c1_pred_fast * u_pred_fast #+ eps * j1_pred_fast\n",
    "    residual4_fast =  dc2_dt + z2 * c2_pred_fast * u_pred_fast #+ eps * j2_pred_fast\n",
    "    residual5_fast =  dj1_dt  \n",
    "    residual6_fast =  dj2_dt \n",
    "    residual7_fast =  dw_dt #- eps\n",
    "    \n",
    "    init_loss_fast = torch.square(phi_pred_fast[0] - phi_init) +\\\n",
    "                     torch.square(c1_pred_fast[0] - c1_init)  +\\\n",
    "                     torch.square(c2_pred_fast[0] - c2_init)  +\\\n",
    "                     torch.square(w_pred_fast[0] - w_init)  \n",
    "    \n",
    "    physics_loss_fast = torch.mean(residual1_fast**2 + residual2_fast**2 +\\\n",
    "                                   residual3_fast**2 + residual4_fast**2 +\\\n",
    "                                   residual5_fast**2 + residual6_fast**2 +\\\n",
    "                                   residual7_fast**2)\n",
    "    boundary_loss_fast = torch.square(phi_pred_fast[-1] - phi_slow_init) +\\\n",
    "                         torch.square(u_pred_fast[-1] - u_a) +\\\n",
    "                         torch.square(c1_pred_fast[-1] - c1_slow_init) +\\\n",
    "                         torch.square(c2_pred_fast[-1] - c2_slow_init) +\\\n",
    "                         torch.square(w_pred_fast[-1] - w_slow_init) \n",
    "    J1 = j1_pred_fast[-1]\n",
    "    J2 = j2_pred_fast[-1]\n",
    "    if epoch % 1000 == 0:\n",
    "        print(J1)\n",
    "        print(J2)\n",
    "        \n",
    "    total_loss_fast   = phys_weight * physics_loss_fast +\\\n",
    "                        init_weight * init_loss_fast + bndry_weight * boundary_loss_fast\n",
    "    return total_loss_fast\n",
    "\n",
    "def loss_func_slow(model, tau_tensor, eps, random_points=10):\n",
    "    tau_tensor.requires_grad = True\n",
    "    pred_slow = model(tau_tensor)\n",
    "    phi_pred_slow, u_pred_slow = pred_slow[:, 0].unsqueeze(1), pred_slow[:, 1].unsqueeze(1)\n",
    "    c1_pred_slow, c2_pred_slow = pred_slow[:, 2].unsqueeze(1), pred_slow[:, 3].unsqueeze(1)\n",
    "    j1_pred_slow, j2_pred_slow = pred_slow[:, 4].unsqueeze(1), pred_slow[:, 5].unsqueeze(1)\n",
    "    w_pred_slow = pred_slow[:, 6].unsqueeze(1)\n",
    "    #ones = torch.ones_like(x_pred_fast, requires_grad=True)    \n",
    "    dphi_dtau = torch.autograd.grad(phi_pred_slow.sum(), tau_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    du_dtau = torch.autograd.grad(u_pred_slow.sum(), tau_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dc1_dtau = torch.autograd.grad(c1_pred_slow.sum(), tau_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dc2_dtau = torch.autograd.grad(c2_pred_slow.sum(), tau_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dj1_dtau = torch.autograd.grad(j1_pred_slow.sum(), tau_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dj2_dtau = torch.autograd.grad(j2_pred_slow.sum(), tau_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dw_dtau = torch.autograd.grad(w_pred_slow.sum(), tau_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    \n",
    "    #for the fast system\n",
    "    p = - (z1 * j1_pred_slow + z2 * j2_pred_slow)/(z1 * (z1 - z2) * c1_pred_slow)\n",
    "    #p2 = (z1 * j1_pred_slow + z2 * j2_pred_slow) #/(z1 * (z1 - z2) * c1_pred_slow)\n",
    "        \n",
    "    residual1_slow = u_pred_slow #- eps * p\n",
    "    residual2_slow = dphi_dtau - p\n",
    "    residual3_slow = dc1_dtau + z1 * c1_pred_slow * p + j1_pred_slow #* (z1 - z2)*z1*c1_pred_slow\n",
    "    residual4_slow = dc2_dtau + z2 * c2_pred_slow * p + j2_pred_slow #* (z1 - z2)*z1*c1_pred_slow\n",
    "    residual5_slow = dj1_dtau\n",
    "    residual6_slow = dj2_dtau \n",
    "    residual7_slow = dw_dtau - 1 # - (z1 - z2) * z1 * c1_pred_slow\n",
    "    residual8_slow = z1 * c1_pred_slow + z2 * c2_pred_slow\n",
    "    \n",
    "    #residual1_slow = dphi_dtau - u_pred_slow\n",
    "    #residual2_slow = du_dtau \n",
    "    #residual3_slow = dc1_dtau  + z1 * c1_pred_slow * u_pred_slow \n",
    "    #residual4_slow = dc2_dtau  + z2 * c2_pred_slow * u_pred_slow \n",
    "       \n",
    "    \n",
    "    init_loss_slow = torch.square(phi_pred_slow[0] - phi_slow_init) +\\\n",
    "                     torch.square(u_pred_slow[0] - u_a) +\\\n",
    "                     torch.square(c1_pred_slow[0] - c1_slow_init)  +\\\n",
    "                     torch.square(c2_pred_slow[0] - c2_slow_init)  +\\\n",
    "                     torch.square(w_pred_slow[0] - w_slow_init)  \n",
    "    \n",
    "    physics_loss_slow = torch.mean(residual1_slow**2 + residual2_slow**2 +\\\n",
    "                                   residual3_slow**2 + residual4_slow**2 +\\\n",
    "                                   residual5_slow**2 + residual6_slow**2 +\\\n",
    "                                   residual7_slow**2 + residual8_slow**2)\n",
    "    boundary_loss_slow =  torch.square(j1_pred_slow[0] - J1)  +\\\n",
    "                          torch.square(j2_pred_slow[0] - J2)  +\\\n",
    "                          torch.square(j1_pred_slow[-1] - J1)  +\\\n",
    "                          torch.square(j2_pred_slow[-1] - J2)  +\\\n",
    "                          torch.square(u_pred_slow[-1] - u_b)\n",
    "    \n",
    "    #u_b = u_pred_slow[-1]\n",
    "    \n",
    "    total_loss_fast   = phys_weight * physics_loss_slow +\\\n",
    "                        init_weight * init_loss_slow + bndry_weight * boundary_loss_slow\n",
    "    return total_loss_fast\n",
    "\n",
    "\n",
    "def loss_func_fast2(model, t2_tensor, phi_end, c1_end, c2_end, w_end,\\\n",
    "                                    phi_slow_end, c1_slow_end, c2_slow_end, w_slow_end,\\\n",
    "                                    eps, random_points=10):\n",
    "    t2_tensor.requires_grad = True\n",
    "    pred_fast2 = model(t2_tensor)\n",
    "    phi_pred_fast2, u_pred_fast2 = pred_fast2[:, 0].unsqueeze(1), pred_fast2[:, 1].unsqueeze(1)\n",
    "    c1_pred_fast2, c2_pred_fast2 = pred_fast2[:, 2].unsqueeze(1), pred_fast2[:, 3].unsqueeze(1)\n",
    "    j1_pred_fast2, j2_pred_fast2 = pred_fast2[:, 4].unsqueeze(1), pred_fast2[:, 5].unsqueeze(1)\n",
    "    w_pred_fast2 = pred_fast2[:, 6].unsqueeze(1)\n",
    "    #ones = torch.ones_like(x_pred_fast, requires_grad=True)    \n",
    "    dphi_dt2 = torch.autograd.grad(phi_pred_fast2.sum(), t2_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    du_dt2 = torch.autograd.grad(u_pred_fast2.sum(), t2_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dc1_dt2 = torch.autograd.grad(c1_pred_fast2.sum(), t2_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dc2_dt2 = torch.autograd.grad(c2_pred_fast2.sum(), t2_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dj1_dt2 = torch.autograd.grad(j1_pred_fast2.sum(), t2_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dj2_dt2 = torch.autograd.grad(j2_pred_fast2.sum(), t2_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    dw_dt2 = torch.autograd.grad(w_pred_fast2.sum(), t2_tensor, retain_graph=True, create_graph=True)[0]\n",
    "    \n",
    "    #for the fast system\n",
    "    residual1_fast2 =  dphi_dt2 - u_pred_fast2\n",
    "    residual2_fast2 =  du_dt2 + z1 * c1_pred_fast2 + z2 * c2_pred_fast2\n",
    "    residual3_fast2 =  dc1_dt2 + z1 * c1_pred_fast2 * u_pred_fast2 #+ eps * j1_pred_fast2\n",
    "    residual4_fast2 =  dc2_dt2 + z2 * c2_pred_fast2 * u_pred_fast2 #+ eps * j2_pred_fast2\n",
    "    residual5_fast2 =  dj1_dt2  \n",
    "    residual6_fast2 =  dj2_dt2 \n",
    "    residual7_fast2 =  dw_dt2 #- eps\n",
    "    \n",
    "    init_loss_fast2 = torch.square(phi_pred_fast2[0] - phi_end) +\\\n",
    "                      torch.square(c1_pred_fast2[0] - c1_end)  +\\\n",
    "                      torch.square(c2_pred_fast2[0] - c2_end)  +\\\n",
    "                      torch.square(w_pred_fast2[0] - w_end)  \n",
    "    \n",
    "    physics_loss_fast2 = torch.mean(residual1_fast2**2 + residual2_fast2**2 +\\\n",
    "                                   residual3_fast2**2 + residual4_fast2**2 +\\\n",
    "                                   residual5_fast2**2 + residual6_fast2**2 +\\\n",
    "                                   residual7_fast2**2)\n",
    "    boundary_loss_fast2 = torch.square(phi_pred_fast2[-1] - phi_slow_end) +\\\n",
    "                          torch.square(u_pred_fast2[-1] - u_b) +\\\n",
    "                          torch.square(c1_pred_fast2[-1] - c1_slow_end) +\\\n",
    "                          torch.square(c2_pred_fast2[-1] - c2_slow_end) +\\\n",
    "                          torch.square(j1_pred_fast2[-1] - J1) +\\\n",
    "                          torch.square(j2_pred_fast2[-1] - J2) +\\\n",
    "                          torch.square(w_pred_fast2[-1] - w_slow_end) \n",
    "    \n",
    "    total_loss_fast2   = phys_weight * physics_loss_fast2 +\\\n",
    "                         init_weight * init_loss_fast2 + bndry_weight * boundary_loss_fast2\n",
    "    return total_loss_fast2\n",
    "\n",
    "\n",
    "def total_loss_func(model_fast, model_slow, model_fast2, t_tensor, tau_tensor, t2_tensor,\\\n",
    "                    phi_init, c1_init, c2_init, w_init,\\\n",
    "                    phi_slow_init, c1_slow_init, c2_slow_init, w_slow_init,\\\n",
    "                    phi_end, c1_end, c2_end, w_end,\\\n",
    "                    phi_slow_end, c1_slow_end, c2_slow_end, w_slow_end,\\\n",
    "                    eps, weight_fast=1.0, weight_slow=1.0):\n",
    "    loss_fast = loss_func_fast(model_fast, t_tensor, phi_init, c1_init, c2_init, w_init,\\\n",
    "                               phi_slow_init, c1_slow_init, c2_slow_init, w_slow_init, eps)\n",
    "    loss_slow = loss_func_slow(model_slow, tau_tensor, eps)\n",
    "    loss_fast2 = loss_func_fast2(model_fast2, t2_tensor, phi_end, c1_end, c2_end, w_end,\\\n",
    "                                phi_slow_end, c1_slow_end, c2_slow_end, w_slow_end, eps)\n",
    "\n",
    "    total_loss = weight_fast * loss_fast + weight_slow * loss_slow + weight_fast * loss_fast2\n",
    "    \n",
    "    return total_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1ba80cfa",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-09T13:34:34.284041Z",
     "iopub.status.busy": "2024-06-09T13:34:34.283659Z",
     "iopub.status.idle": "2024-06-09T17:21:58.808865Z",
     "shell.execute_reply": "2024-06-09T17:21:58.807644Z"
    },
    "papermill": {
     "duration": 13644.535203,
     "end_time": "2024-06-09T17:21:58.811617",
     "exception": false,
     "start_time": "2024-06-09T13:34:34.276414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([0.0483], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.3994], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 0, Total Loss: 317.8085027745016\n",
      "tensor([-0.2488], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1746], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 1000, Total Loss: 13.55492447084015\n",
      "tensor([-0.2536], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1731], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 2000, Total Loss: 1.9879689083496381\n",
      "tensor([-0.2580], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1713], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 3000, Total Loss: 1.6479416117807666\n",
      "tensor([-0.2625], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1695], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 4000, Total Loss: 1.5829615136410917\n",
      "tensor([-0.2683], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1674], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 5000, Total Loss: 1.6973204586020278\n",
      "tensor([-0.2756], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1645], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 6000, Total Loss: 1.4871161255196161\n",
      "tensor([-0.2828], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1613], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 7000, Total Loss: 1.5413403146745392\n",
      "tensor([-0.2874], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1585], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 8000, Total Loss: 1.3651264554067002\n",
      "tensor([-0.2891], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1559], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 9000, Total Loss: 1.3816693898834616\n",
      "tensor([-0.2906], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1525], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 10000, Total Loss: 1.7400365113849918\n",
      "tensor([-0.2922], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1491], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 11000, Total Loss: 1.240178738690125\n",
      "tensor([-0.2924], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1464], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 12000, Total Loss: 1.2448697275750595\n",
      "tensor([-0.2934], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1441], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 13000, Total Loss: 1.285736755691628\n",
      "tensor([-0.2970], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1410], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 14000, Total Loss: 1.2342235842253162\n",
      "tensor([-0.3033], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1363], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 15000, Total Loss: 1.2154353069305723\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1292], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 16000, Total Loss: 1.2987985595938094\n",
      "tensor([-0.3256], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1184], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 17000, Total Loss: 1.2315039299137032\n",
      "tensor([-0.3397], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.1029], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 18000, Total Loss: 1.2603751966024472\n",
      "tensor([-0.3517], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0826], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 19000, Total Loss: 1.2305242299191208\n",
      "tensor([-0.3567], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0595], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 20000, Total Loss: 1.2562756399930481\n",
      "tensor([-0.3539], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0380], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 21000, Total Loss: 1.2127786964277198\n",
      "tensor([-0.3483], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0215], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 22000, Total Loss: 1.1993187239566419\n",
      "tensor([-0.3434], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 23000, Total Loss: 1.1935348848835416\n",
      "tensor([-0.3354], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0070], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 24000, Total Loss: 1.196659640997122\n",
      "tensor([-0.3206], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 25000, Total Loss: 1.1974796049777074\n",
      "tensor([-0.3067], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0138], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 26000, Total Loss: 1.2229216193243637\n",
      "tensor([-0.2958], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0158], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 27000, Total Loss: 1.3806428188537798\n",
      "tensor([-0.2883], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0158], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 28000, Total Loss: 1.4487808477526922\n",
      "tensor([-0.2824], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0145], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 29000, Total Loss: 1.1967337953138137\n",
      "tensor([-0.2776], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 30000, Total Loss: 1.8323685457194039\n",
      "tensor([-0.2734], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0090], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 31000, Total Loss: 1.3814689483800504\n",
      "tensor([-0.2699], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0054], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 32000, Total Loss: 2.3727190122070443\n",
      "tensor([-0.2665], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0017], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 33000, Total Loss: 1.2207247987310241\n",
      "tensor([-0.2627], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0021], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 34000, Total Loss: 1.2439118098379913\n",
      "tensor([-0.2586], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0057], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 35000, Total Loss: 1.1884550212150322\n",
      "tensor([-0.2547], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0088], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 36000, Total Loss: 1.2156661704539498\n",
      "tensor([-0.2513], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 37000, Total Loss: 1.1861822767822336\n",
      "tensor([-0.2486], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0137], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 38000, Total Loss: 1.207633891031964\n",
      "tensor([-0.2466], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0156], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 39000, Total Loss: 1.2115275402997985\n",
      "tensor([-0.2452], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0169], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 40000, Total Loss: 1.2054804165533688\n",
      "tensor([-0.2442], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0179], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 41000, Total Loss: 1.4481493526231874\n",
      "tensor([-0.2437], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0186], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 42000, Total Loss: 1.2165803154480923\n",
      "tensor([-0.2435], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0191], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 43000, Total Loss: 1.2403338364976935\n",
      "tensor([-0.2437], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0193], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 44000, Total Loss: 1.3493826759751908\n",
      "tensor([-0.2440], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0195], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 45000, Total Loss: 1.2026372624519903\n",
      "tensor([-0.2446], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0195], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 46000, Total Loss: 1.218404600560935\n",
      "tensor([-0.2452], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0194], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 47000, Total Loss: 1.214416747487287\n",
      "tensor([-0.2459], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0193], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 48000, Total Loss: 1.1961824869811426\n",
      "tensor([-0.2467], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0191], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 49000, Total Loss: 1.1981816390443483\n",
      "tensor([-0.2475], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0188], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 50000, Total Loss: 1.20588729388059\n",
      "tensor([-0.2484], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0185], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 51000, Total Loss: 1.521760991085798\n",
      "tensor([-0.2493], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0182], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 52000, Total Loss: 1.3180937577457137\n",
      "tensor([-0.2502], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0178], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 53000, Total Loss: 3.045537263319279\n",
      "tensor([-0.2512], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0174], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 54000, Total Loss: 1.1928785393873522\n",
      "tensor([-0.2522], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0171], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 55000, Total Loss: 1.1992320656995807\n",
      "tensor([-0.2531], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0167], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 56000, Total Loss: 1.213311263985752\n",
      "tensor([-0.2541], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0162], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 57000, Total Loss: 1.4126080135016328\n",
      "tensor([-0.2550], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0158], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 58000, Total Loss: 1.2642814831264295\n",
      "tensor([-0.2560], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0154], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 59000, Total Loss: 1.2122367123714186\n",
      "tensor([-0.2569], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0150], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 60000, Total Loss: 1.8658754986734487\n",
      "tensor([-0.2578], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0145], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 61000, Total Loss: 1.306231855690924\n",
      "tensor([-0.2587], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0141], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 62000, Total Loss: 2.8372062384424406\n",
      "tensor([-0.2596], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0137], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 63000, Total Loss: 2.372017724363125\n",
      "tensor([-0.2605], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 64000, Total Loss: 2.2223423512956346\n",
      "tensor([-0.2614], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 65000, Total Loss: 2.1136673687618655\n",
      "tensor([-0.2623], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 66000, Total Loss: 1.9967873641344962\n",
      "tensor([-0.2631], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 67000, Total Loss: 1.8192419704275615\n",
      "tensor([-0.2639], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 68000, Total Loss: 1.5373337780146257\n",
      "tensor([-0.2648], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 69000, Total Loss: 1.1956047588785133\n",
      "tensor([-0.2656], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 70000, Total Loss: 1.1847150308446144\n",
      "tensor([-0.2664], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 71000, Total Loss: 1.1658811709496701\n",
      "tensor([-0.2672], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 72000, Total Loss: 3.303887757223477\n",
      "tensor([-0.2679], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 73000, Total Loss: 1.180784726827903\n",
      "tensor([-0.2687], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0094], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 74000, Total Loss: 1.172839973055587\n",
      "tensor([-0.2694], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0091], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 75000, Total Loss: 1.205094183621554\n",
      "tensor([-0.2701], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0088], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 76000, Total Loss: 1.6015505872738365\n",
      "tensor([-0.2709], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0085], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 77000, Total Loss: 1.2250652886726978\n",
      "tensor([-0.2716], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0081], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 78000, Total Loss: 1.1760667216972098\n",
      "tensor([-0.2723], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0078], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 79000, Total Loss: 1.2669044025353016\n",
      "tensor([-0.2729], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0075], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 80000, Total Loss: 1.1901796356293277\n",
      "tensor([-0.2735], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0072], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 81000, Total Loss: 1.2672321489889498\n",
      "tensor([-0.2742], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0069], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 82000, Total Loss: 1.2278802493128227\n",
      "tensor([-0.2748], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0067], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 83000, Total Loss: 1.183027111790657\n",
      "tensor([-0.2754], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0064], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 84000, Total Loss: 1.6957426045560542\n",
      "tensor([-0.2760], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0061], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 85000, Total Loss: 1.22040242027353\n",
      "tensor([-0.2766], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0058], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 86000, Total Loss: 1.2307357687560851\n",
      "tensor([-0.2772], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0056], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 87000, Total Loss: 1.5906280800098627\n",
      "tensor([-0.2777], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0053], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 88000, Total Loss: 1.2953299840822763\n",
      "tensor([-0.2783], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0050], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 89000, Total Loss: 1.273536976689135\n",
      "tensor([-0.2788], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0048], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 90000, Total Loss: 1.2832021984488793\n",
      "tensor([-0.2793], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0046], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 91000, Total Loss: 2.06227054617002\n",
      "tensor([-0.2798], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0043], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 92000, Total Loss: 1.9281661424225223\n",
      "tensor([-0.2803], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0041], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 93000, Total Loss: 1.8719479782157185\n",
      "tensor([-0.2808], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0039], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 94000, Total Loss: 1.8432850007681028\n",
      "tensor([-0.2813], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0036], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 95000, Total Loss: 1.8257665326386205\n",
      "tensor([-0.2818], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0034], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 96000, Total Loss: 1.808814298092658\n",
      "tensor([-0.2822], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0032], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 97000, Total Loss: 1.7845376784207436\n",
      "tensor([-0.2827], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0030], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 98000, Total Loss: 1.7461223631198337\n",
      "tensor([-0.2831], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0028], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 99000, Total Loss: 1.683356455346774\n",
      "tensor([-0.2836], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0026], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 100000, Total Loss: 1.5766865013610583\n",
      "tensor([-0.2840], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0024], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 101000, Total Loss: 1.3895357598697777\n",
      "tensor([-0.2844], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0022], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 102000, Total Loss: 1.2685065693105908\n",
      "tensor([-0.2848], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0021], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 103000, Total Loss: 1.2288047705253138\n",
      "tensor([-0.2852], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0019], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 104000, Total Loss: 1.1849138349853803\n",
      "tensor([-0.2856], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0017], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 105000, Total Loss: 1.1783596529364084\n",
      "tensor([-0.2860], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0016], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 106000, Total Loss: 1.196648807318261\n",
      "tensor([-0.2863], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0014], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 107000, Total Loss: 1.2711879875630667\n",
      "tensor([-0.2867], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0012], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 108000, Total Loss: 1.2082635611139008\n",
      "tensor([-0.2870], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0010], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 109000, Total Loss: 1.2316753782540293\n",
      "tensor([-0.2874], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0009], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 110000, Total Loss: 1.1858470966784798\n",
      "tensor([-0.2877], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0007], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 111000, Total Loss: 2.035688985401278\n",
      "tensor([-0.2881], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0006], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 112000, Total Loss: 1.2276331096301196\n",
      "tensor([-0.2884], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0004], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 113000, Total Loss: 1.2020173792048434\n",
      "tensor([-0.2887], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0003], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 114000, Total Loss: 1.9638440925519256\n",
      "tensor([-0.2890], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([0.0001], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 115000, Total Loss: 1.2126322665159566\n",
      "tensor([-0.2893], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-1.2101e-05], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 116000, Total Loss: 1.2340284600787965\n",
      "tensor([-0.2896], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0001], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 117000, Total Loss: 1.4369749594448749\n",
      "tensor([-0.2899], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0003], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 118000, Total Loss: 1.4306333120186054\n",
      "tensor([-0.2902], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0004], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 119000, Total Loss: 1.5602843695219388\n",
      "tensor([-0.2905], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0006], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 120000, Total Loss: 1.2349721273876522\n",
      "tensor([-0.2908], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0007], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 121000, Total Loss: 1.3264297104231495\n",
      "tensor([-0.2910], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0009], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 122000, Total Loss: 1.2190815150604157\n",
      "tensor([-0.2913], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0010], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 123000, Total Loss: 1.209364714418576\n",
      "tensor([-0.2916], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0011], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 124000, Total Loss: 1.2040718137526185\n",
      "tensor([-0.2918], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0012], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 125000, Total Loss: 1.4035565854952845\n",
      "tensor([-0.2921], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0013], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 126000, Total Loss: 1.2262259066837158\n",
      "tensor([-0.2923], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0015], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 127000, Total Loss: 1.21667803487849\n",
      "tensor([-0.2926], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0016], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 128000, Total Loss: 4.704871661430329\n",
      "tensor([-0.2928], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0017], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 129000, Total Loss: 1.2944067009189337\n",
      "tensor([-0.2931], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0018], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 130000, Total Loss: 1.2192275830282218\n",
      "tensor([-0.2933], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0019], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 131000, Total Loss: 1.1889960783518003\n",
      "tensor([-0.2935], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0020], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 132000, Total Loss: 1.1871475147199555\n",
      "tensor([-0.2937], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0021], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 133000, Total Loss: 1.28285348782999\n",
      "tensor([-0.2940], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0022], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 134000, Total Loss: 1.20771558451722\n",
      "tensor([-0.2942], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0023], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 135000, Total Loss: 1.1878062198906907\n",
      "tensor([-0.2944], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0024], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 136000, Total Loss: 1.2228714575041502\n",
      "tensor([-0.2946], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0026], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 137000, Total Loss: 2.0809329478404224\n",
      "tensor([-0.2948], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0026], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 138000, Total Loss: 1.264191076977992\n",
      "tensor([-0.2950], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0027], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 139000, Total Loss: 1.2776386924464116\n",
      "tensor([-0.2952], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0028], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 140000, Total Loss: 1.5340492708888582\n",
      "tensor([-0.2954], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0029], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 141000, Total Loss: 1.3593359174426514\n",
      "tensor([-0.2956], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0030], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 142000, Total Loss: 2.1107730385025967\n",
      "tensor([-0.2958], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0031], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 143000, Total Loss: 1.8554863271093807\n",
      "tensor([-0.2960], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0032], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 144000, Total Loss: 1.4468145201952687\n",
      "tensor([-0.2962], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0033], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 145000, Total Loss: 1.3536651319034303\n",
      "tensor([-0.2963], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0033], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 146000, Total Loss: 1.1940845145587655\n",
      "tensor([-0.2965], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0034], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 147000, Total Loss: 1.1751704384458017\n",
      "tensor([-0.2967], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0035], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 148000, Total Loss: 2.058747553367542\n",
      "tensor([-0.2969], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0036], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 149000, Total Loss: 1.398673293578119\n",
      "tensor([-0.2970], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0037], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 150000, Total Loss: 1.1788849908074635\n",
      "tensor([-0.2972], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0038], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 151000, Total Loss: 1.261762366663646\n",
      "tensor([-0.2974], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0039], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 152000, Total Loss: 1.1784191133269444\n",
      "tensor([-0.2975], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0039], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 153000, Total Loss: 1.2312614563512043\n",
      "tensor([-0.2977], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0040], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 154000, Total Loss: 1.1750832837952812\n",
      "tensor([-0.2978], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0041], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 155000, Total Loss: 1.2158048396901948\n",
      "tensor([-0.2980], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0042], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 156000, Total Loss: 1.3000734842605792\n",
      "tensor([-0.2981], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0043], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 157000, Total Loss: 1.6922372941753432\n",
      "tensor([-0.2983], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0043], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 158000, Total Loss: 1.3026411469882746\n",
      "tensor([-0.2984], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0044], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 159000, Total Loss: 1.2567027990612762\n",
      "tensor([-0.2986], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0045], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 160000, Total Loss: 1.2353940614537193\n",
      "tensor([-0.2987], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0045], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 161000, Total Loss: 1.1869209347591427\n",
      "tensor([-0.2988], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0046], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 162000, Total Loss: 1.4378195161410736\n",
      "tensor([-0.2990], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0047], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 163000, Total Loss: 1.3646480090947777\n",
      "tensor([-0.2991], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0048], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 164000, Total Loss: 1.2414211514897728\n",
      "tensor([-0.2993], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0048], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 165000, Total Loss: 1.3459215243983407\n",
      "tensor([-0.2994], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0049], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 166000, Total Loss: 4.486962188720985\n",
      "tensor([-0.2995], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0050], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 167000, Total Loss: 4.178272482062608\n",
      "tensor([-0.2997], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0050], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 168000, Total Loss: 3.830380939727094\n",
      "tensor([-0.2998], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0051], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 169000, Total Loss: 3.4381114321401753\n",
      "tensor([-0.2999], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0051], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 170000, Total Loss: 3.0648212028401836\n",
      "tensor([-0.3000], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0052], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 171000, Total Loss: 2.784692094662612\n",
      "tensor([-0.3002], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0053], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 172000, Total Loss: 2.6416828711306755\n",
      "tensor([-0.3003], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0053], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 173000, Total Loss: 2.568568196206633\n",
      "tensor([-0.3004], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0054], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 174000, Total Loss: 2.5547179152260413\n",
      "tensor([-0.3005], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0055], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 175000, Total Loss: 2.536870666558023\n",
      "tensor([-0.3006], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0055], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 176000, Total Loss: 2.510011393028826\n",
      "tensor([-0.3007], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0056], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 177000, Total Loss: 2.4702204986267233\n",
      "tensor([-0.3009], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0056], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 178000, Total Loss: 2.4138993066697862\n",
      "tensor([-0.3010], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0057], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 179000, Total Loss: 2.3398681234535696\n",
      "tensor([-0.3011], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0057], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 180000, Total Loss: 2.2559776322428293\n",
      "tensor([-0.3012], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0058], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 181000, Total Loss: 2.1875985762960246\n",
      "tensor([-0.3013], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0059], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 182000, Total Loss: 2.1470299991610022\n",
      "tensor([-0.3014], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0059], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 183000, Total Loss: 2.131729599622814\n",
      "tensor([-0.3015], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0060], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 184000, Total Loss: 2.123546743611486\n",
      "tensor([-0.3016], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0060], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 185000, Total Loss: 2.116478794258415\n",
      "tensor([-0.3017], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0061], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 186000, Total Loss: 2.1076833707391938\n",
      "tensor([-0.3018], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0061], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 187000, Total Loss: 2.094326251199559\n",
      "tensor([-0.3019], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0062], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 188000, Total Loss: 2.0734454218267473\n",
      "tensor([-0.3020], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0062], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 189000, Total Loss: 2.0401701393021052\n",
      "tensor([-0.3021], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0063], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 190000, Total Loss: 1.9861495921781436\n",
      "tensor([-0.3022], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0063], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 191000, Total Loss: 1.8973707194287972\n",
      "tensor([-0.3023], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0064], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 192000, Total Loss: 1.7444603393317761\n",
      "tensor([-0.3024], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0064], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 193000, Total Loss: 1.4691108592581839\n",
      "tensor([-0.3025], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0065], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 194000, Total Loss: 1.2811113505071714\n",
      "tensor([-0.3026], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0065], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 195000, Total Loss: 1.2551249637989836\n",
      "tensor([-0.3027], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0066], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 196000, Total Loss: 1.2325204237393177\n",
      "tensor([-0.3027], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0066], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 197000, Total Loss: 1.2065135501070006\n",
      "tensor([-0.3028], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0067], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 198000, Total Loss: 1.1891116700715285\n",
      "tensor([-0.3029], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0067], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 199000, Total Loss: 1.1717655516636063\n",
      "tensor([-0.3030], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0068], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 200000, Total Loss: 1.1626812606218568\n",
      "tensor([-0.3031], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0068], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 201000, Total Loss: 1.1869422031059158\n",
      "tensor([-0.3032], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0068], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 202000, Total Loss: 1.150004249211337\n",
      "tensor([-0.3033], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0069], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 203000, Total Loss: 1.1473552129201874\n",
      "tensor([-0.3033], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0069], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 204000, Total Loss: 1.151966165959669\n",
      "tensor([-0.3034], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0070], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 205000, Total Loss: 1.17099417501636\n",
      "tensor([-0.3035], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0070], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 206000, Total Loss: 1.1454178000329416\n",
      "tensor([-0.3036], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0071], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 207000, Total Loss: 1.148729608834862\n",
      "tensor([-0.3037], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0071], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 208000, Total Loss: 1.1446182867802013\n",
      "tensor([-0.3037], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0071], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 209000, Total Loss: 1.1487646162102108\n",
      "tensor([-0.3038], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0072], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 210000, Total Loss: 1.137479804302196\n",
      "tensor([-0.3039], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0072], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 211000, Total Loss: 1.1467394941027331\n",
      "tensor([-0.3040], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0073], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 212000, Total Loss: 1.1353285965335969\n",
      "tensor([-0.3040], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0073], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 213000, Total Loss: 1.1349202513642414\n",
      "tensor([-0.3041], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0073], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 214000, Total Loss: 1.148917257478907\n",
      "tensor([-0.3042], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0074], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 215000, Total Loss: 1.15525684949832\n",
      "tensor([-0.3043], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0074], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 216000, Total Loss: 1.168421689893848\n",
      "tensor([-0.3043], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0075], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 217000, Total Loss: 1.1620901468667613\n",
      "tensor([-0.3044], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0075], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 218000, Total Loss: 1.54174283989385\n",
      "tensor([-0.3045], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0075], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 219000, Total Loss: 1.1477826907979984\n",
      "tensor([-0.3045], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0076], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 220000, Total Loss: 1.143490543512379\n",
      "tensor([-0.3046], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0076], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 221000, Total Loss: 1.1252796271604473\n",
      "tensor([-0.3047], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0076], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 222000, Total Loss: 1.1238562973160553\n",
      "tensor([-0.3047], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0077], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 223000, Total Loss: 1.1230817935726527\n",
      "tensor([-0.3048], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0077], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 224000, Total Loss: 1.1459006062207335\n",
      "tensor([-0.3049], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0078], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 225000, Total Loss: 1.1228637960336498\n",
      "tensor([-0.3049], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0078], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 226000, Total Loss: 1.119954324808971\n",
      "tensor([-0.3050], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0078], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 227000, Total Loss: 1.1250689266868557\n",
      "tensor([-0.3050], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0079], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 228000, Total Loss: 1.1190024326592303\n",
      "tensor([-0.3051], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0079], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 229000, Total Loss: 1.140123388438386\n",
      "tensor([-0.3052], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0079], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 230000, Total Loss: 1.1424610482428033\n",
      "tensor([-0.3052], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0080], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 231000, Total Loss: 1.1190240546948236\n",
      "tensor([-0.3053], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0080], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 232000, Total Loss: 1.1229143636752077\n",
      "tensor([-0.3054], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0080], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 233000, Total Loss: 1.115771215197743\n",
      "tensor([-0.3054], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0081], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 234000, Total Loss: 1.1135655342848665\n",
      "tensor([-0.3055], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0081], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 235000, Total Loss: 1.1149544309517678\n",
      "tensor([-0.3055], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0081], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 236000, Total Loss: 1.1176309750111826\n",
      "tensor([-0.3056], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0082], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 237000, Total Loss: 1.133428971988432\n",
      "tensor([-0.3056], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0082], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 238000, Total Loss: 1.1305160289495373\n",
      "tensor([-0.3057], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0082], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 239000, Total Loss: 1.112531827746593\n",
      "tensor([-0.3058], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0083], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 240000, Total Loss: 1.1407539183590736\n",
      "tensor([-0.3058], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0083], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 241000, Total Loss: 1.1241144123669389\n",
      "tensor([-0.3059], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0083], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 242000, Total Loss: 1.116568204081588\n",
      "tensor([-0.3059], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0083], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 243000, Total Loss: 1.1106759094868721\n",
      "tensor([-0.3060], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0084], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 244000, Total Loss: 1.1145040461216205\n",
      "tensor([-0.3060], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0084], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 245000, Total Loss: 1.1433129845737575\n",
      "tensor([-0.3061], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0084], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 246000, Total Loss: 1.1197795736270586\n",
      "tensor([-0.3061], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0085], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 247000, Total Loss: 1.1057792761107845\n",
      "tensor([-0.3062], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0085], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 248000, Total Loss: 1.1109573912208244\n",
      "tensor([-0.3062], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0085], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 249000, Total Loss: 1.1149760677006386\n",
      "tensor([-0.3063], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0086], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 250000, Total Loss: 1.1036771734959598\n",
      "tensor([-0.3063], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0086], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 251000, Total Loss: 1.1027558185934643\n",
      "tensor([-0.3064], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0086], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 252000, Total Loss: 1.1284117975141696\n",
      "tensor([-0.3064], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0087], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 253000, Total Loss: 1.1676646958853238\n",
      "tensor([-0.3065], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0087], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 254000, Total Loss: 1.135070457284708\n",
      "tensor([-0.3065], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0087], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 255000, Total Loss: 1.2473072394622238\n",
      "tensor([-0.3065], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0087], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 256000, Total Loss: 1.2924142650370443\n",
      "tensor([-0.3066], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0088], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 257000, Total Loss: 1.1402868484746564\n",
      "tensor([-0.3066], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0088], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 258000, Total Loss: 1.1588080993156757\n",
      "tensor([-0.3067], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0088], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 259000, Total Loss: 1.1441656037752213\n",
      "tensor([-0.3067], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0089], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 260000, Total Loss: 1.1299415908733725\n",
      "tensor([-0.3068], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0089], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 261000, Total Loss: 1.1191123687731097\n",
      "tensor([-0.3068], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0089], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 262000, Total Loss: 1.125356503115187\n",
      "tensor([-0.3069], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0090], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 263000, Total Loss: 1.1115433719283219\n",
      "tensor([-0.3069], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0090], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 264000, Total Loss: 1.1093099507689639\n",
      "tensor([-0.3069], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0090], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 265000, Total Loss: 1.1474899106365362\n",
      "tensor([-0.3070], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0090], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 266000, Total Loss: 1.1119520532630187\n",
      "tensor([-0.3070], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0091], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 267000, Total Loss: 1.118932583056397\n",
      "tensor([-0.3071], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0091], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 268000, Total Loss: 1.1212280266919368\n",
      "tensor([-0.3071], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0091], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 269000, Total Loss: 1.1938039197221424\n",
      "tensor([-0.3072], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0091], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 270000, Total Loss: 1.1235267569050684\n",
      "tensor([-0.3072], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0092], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 271000, Total Loss: 1.196306289375009\n",
      "tensor([-0.3072], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0092], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 272000, Total Loss: 1.1311361243545228\n",
      "tensor([-0.3073], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0092], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 273000, Total Loss: 1.1703922283730808\n",
      "tensor([-0.3073], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0093], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 274000, Total Loss: 1.1338998381718726\n",
      "tensor([-0.3074], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0093], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 275000, Total Loss: 1.153773196805691\n",
      "tensor([-0.3074], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0093], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 276000, Total Loss: 1.2663465206921416\n",
      "tensor([-0.3074], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0093], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 277000, Total Loss: 1.1614303250103704\n",
      "tensor([-0.3075], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0094], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 278000, Total Loss: 1.1168300174255539\n",
      "tensor([-0.3075], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0094], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 279000, Total Loss: 1.1184177920446525\n",
      "tensor([-0.3076], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0094], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 280000, Total Loss: 1.126983605796573\n",
      "tensor([-0.3076], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0094], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 281000, Total Loss: 1.1112365195586464\n",
      "tensor([-0.3076], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0095], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 282000, Total Loss: 1.1154719425074984\n",
      "tensor([-0.3077], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0095], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 283000, Total Loss: 1.1150882174249195\n",
      "tensor([-0.3077], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0095], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 284000, Total Loss: 1.8857419080016922\n",
      "tensor([-0.3078], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0095], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 285000, Total Loss: 1.131156040927239\n",
      "tensor([-0.3078], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0096], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 286000, Total Loss: 1.1428275805793162\n",
      "tensor([-0.3078], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0096], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 287000, Total Loss: 1.2046625963396793\n",
      "tensor([-0.3079], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0096], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 288000, Total Loss: 1.1288906678115493\n",
      "tensor([-0.3079], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0096], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 289000, Total Loss: 1.1281255284605503\n",
      "tensor([-0.3079], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0097], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 290000, Total Loss: 2.057414936148851\n",
      "tensor([-0.3080], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0097], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 291000, Total Loss: 1.374264514663427\n",
      "tensor([-0.3080], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0097], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 292000, Total Loss: 1.1988554027160987\n",
      "tensor([-0.3081], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0097], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 293000, Total Loss: 1.1330134720571658\n",
      "tensor([-0.3081], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 294000, Total Loss: 1.1363620552683413\n",
      "tensor([-0.3081], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 295000, Total Loss: 1.1509817864683862\n",
      "tensor([-0.3082], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 296000, Total Loss: 1.1277754799233035\n",
      "tensor([-0.3082], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 297000, Total Loss: 1.127746305845645\n",
      "tensor([-0.3082], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 298000, Total Loss: 1.1588259664422718\n",
      "tensor([-0.3083], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0099], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 299000, Total Loss: 1.1377103572240315\n",
      "tensor([-0.3083], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0099], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 300000, Total Loss: 1.12942953126109\n",
      "tensor([-0.3083], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0099], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 301000, Total Loss: 1.1240993759713862\n",
      "tensor([-0.3084], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0099], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 302000, Total Loss: 1.143347919892055\n",
      "tensor([-0.3084], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0100], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 303000, Total Loss: 1.1697090010152982\n",
      "tensor([-0.3084], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0100], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 304000, Total Loss: 1.142168716733915\n",
      "tensor([-0.3085], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0100], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 305000, Total Loss: 1.134277248451678\n",
      "tensor([-0.3085], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0100], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 306000, Total Loss: 1.2017283263876484\n",
      "tensor([-0.3085], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0100], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 307000, Total Loss: 1.128140664751507\n",
      "tensor([-0.3086], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 308000, Total Loss: 1.1882699678528033\n",
      "tensor([-0.3086], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 309000, Total Loss: 1.1408425813074856\n",
      "tensor([-0.3086], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 310000, Total Loss: 1.1352659970754886\n",
      "tensor([-0.3087], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 311000, Total Loss: 1.179501259949399\n",
      "tensor([-0.3087], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 312000, Total Loss: 1.15046266976018\n",
      "tensor([-0.3087], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 313000, Total Loss: 1.1290688737633157\n",
      "tensor([-0.3088], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 314000, Total Loss: 1.1708015688773736\n",
      "tensor([-0.3088], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 315000, Total Loss: 1.1207218633814056\n",
      "tensor([-0.3088], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 316000, Total Loss: 1.1391528984807726\n",
      "tensor([-0.3089], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 317000, Total Loss: 1.2362077835829002\n",
      "tensor([-0.3089], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0103], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 318000, Total Loss: 1.1190850805469306\n",
      "tensor([-0.3089], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0103], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 319000, Total Loss: 1.2198055856286631\n",
      "tensor([-0.3089], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0103], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 320000, Total Loss: 1.1962875856093595\n",
      "tensor([-0.3090], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0103], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 321000, Total Loss: 1.1496357469922658\n",
      "tensor([-0.3090], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0103], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 322000, Total Loss: 1.1768130489161137\n",
      "tensor([-0.3090], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0104], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 323000, Total Loss: 1.149867004384035\n",
      "tensor([-0.3091], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0104], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 324000, Total Loss: 1.1785183707572255\n",
      "tensor([-0.3091], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0104], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 325000, Total Loss: 1.2988047570551986\n",
      "tensor([-0.3091], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0104], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 326000, Total Loss: 1.1927908470966042\n",
      "tensor([-0.3091], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0104], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 327000, Total Loss: 1.388133168198268\n",
      "tensor([-0.3092], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 328000, Total Loss: 1.1821860973359564\n",
      "tensor([-0.3092], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 329000, Total Loss: 1.5631731500886044\n",
      "tensor([-0.3092], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 330000, Total Loss: 1.2884456563735787\n",
      "tensor([-0.3093], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 331000, Total Loss: 1.1416269767775225\n",
      "tensor([-0.3093], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 332000, Total Loss: 1.1418281723001311\n",
      "tensor([-0.3093], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 333000, Total Loss: 1.3198247788366455\n",
      "tensor([-0.3093], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 334000, Total Loss: 1.1518024373275129\n",
      "tensor([-0.3094], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 335000, Total Loss: 1.2600620785774348\n",
      "tensor([-0.3094], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 336000, Total Loss: 1.181328778456244\n",
      "tensor([-0.3094], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 337000, Total Loss: 1.1558717367627662\n",
      "tensor([-0.3094], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 338000, Total Loss: 1.1562101335039787\n",
      "tensor([-0.3095], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 339000, Total Loss: 1.205999003700853\n",
      "tensor([-0.3095], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 340000, Total Loss: 1.237501166992668\n",
      "tensor([-0.3095], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 341000, Total Loss: 1.1645463651627408\n",
      "tensor([-0.3095], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 342000, Total Loss: 1.2065573141784307\n",
      "tensor([-0.3096], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 343000, Total Loss: 1.260105206794406\n",
      "tensor([-0.3096], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 344000, Total Loss: 1.2641316672522989\n",
      "tensor([-0.3096], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 345000, Total Loss: 1.1671286045523832\n",
      "tensor([-0.3096], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 346000, Total Loss: 1.2917426578691542\n",
      "tensor([-0.3097], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 347000, Total Loss: 1.1951936257406603\n",
      "tensor([-0.3097], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 348000, Total Loss: 1.1846672892050332\n",
      "tensor([-0.3097], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 349000, Total Loss: 1.1893615269738007\n",
      "tensor([-0.3097], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 350000, Total Loss: 1.8099009828202444\n",
      "tensor([-0.3098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 351000, Total Loss: 1.1687324258981606\n",
      "tensor([-0.3098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 352000, Total Loss: 1.1652786449556356\n",
      "tensor([-0.3098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 353000, Total Loss: 1.1743683616544278\n",
      "tensor([-0.3098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 354000, Total Loss: 1.1584435057140636\n",
      "tensor([-0.3098], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 355000, Total Loss: 1.3029440455833565\n",
      "tensor([-0.3099], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 356000, Total Loss: 1.1720675140340895\n",
      "tensor([-0.3099], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 357000, Total Loss: 2.6563937813021616\n",
      "tensor([-0.3099], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 358000, Total Loss: 1.3043531757548836\n",
      "tensor([-0.3099], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 359000, Total Loss: 1.1773282417853395\n",
      "tensor([-0.3100], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 360000, Total Loss: 1.2142473860824938\n",
      "tensor([-0.3100], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 361000, Total Loss: 1.211846020426087\n",
      "tensor([-0.3100], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 362000, Total Loss: 1.1720258046688228\n",
      "tensor([-0.3100], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 363000, Total Loss: 1.1608606446846241\n",
      "tensor([-0.3101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 364000, Total Loss: 1.167856720294012\n",
      "tensor([-0.3101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 365000, Total Loss: 1.2035249667373307\n",
      "tensor([-0.3101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 366000, Total Loss: 1.217263618925866\n",
      "tensor([-0.3101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 367000, Total Loss: 1.2742306394982892\n",
      "tensor([-0.3101], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 368000, Total Loss: 1.7539953516385183\n",
      "tensor([-0.3102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 369000, Total Loss: 1.1659261712881757\n",
      "tensor([-0.3102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 370000, Total Loss: 1.260248594027122\n",
      "tensor([-0.3102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 371000, Total Loss: 1.6922079733628383\n",
      "tensor([-0.3102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 372000, Total Loss: 1.2094932247755965\n",
      "tensor([-0.3102], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 373000, Total Loss: 1.1799029324378716\n",
      "tensor([-0.3103], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 374000, Total Loss: 1.1633635542359937\n",
      "tensor([-0.3103], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 375000, Total Loss: 1.1660311157662304\n",
      "tensor([-0.3103], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 376000, Total Loss: 1.166043435560411\n",
      "tensor([-0.3103], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 377000, Total Loss: 1.1673796498682556\n",
      "tensor([-0.3103], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 378000, Total Loss: 1.1684618204404233\n",
      "tensor([-0.3104], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 379000, Total Loss: 1.5634435432917977\n",
      "tensor([-0.3104], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 380000, Total Loss: 1.197130401282521\n",
      "tensor([-0.3104], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 381000, Total Loss: 1.213286521392128\n",
      "tensor([-0.3104], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 382000, Total Loss: 1.1694098746024955\n",
      "tensor([-0.3104], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 383000, Total Loss: 1.1800389875514152\n",
      "tensor([-0.3105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 384000, Total Loss: 1.3950176218889974\n",
      "tensor([-0.3105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 385000, Total Loss: 1.165590269041839\n",
      "tensor([-0.3105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 386000, Total Loss: 1.1907605466292832\n",
      "tensor([-0.3105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 387000, Total Loss: 1.1666909763629798\n",
      "tensor([-0.3105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 388000, Total Loss: 1.3278883080954436\n",
      "tensor([-0.3105], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 389000, Total Loss: 1.1624421818115789\n",
      "tensor([-0.3106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 390000, Total Loss: 1.16628059841731\n",
      "tensor([-0.3106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 391000, Total Loss: 1.2766750128945794\n",
      "tensor([-0.3106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 392000, Total Loss: 1.9352199887093695\n",
      "tensor([-0.3106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 393000, Total Loss: 1.6296581628548092\n",
      "tensor([-0.3106], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 394000, Total Loss: 1.2145068289367689\n",
      "tensor([-0.3107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 395000, Total Loss: 1.2603110658411663\n",
      "tensor([-0.3107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 396000, Total Loss: 1.1717787012699656\n",
      "tensor([-0.3107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 397000, Total Loss: 1.1713125882354478\n",
      "tensor([-0.3107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 398000, Total Loss: 1.5567596384897067\n",
      "tensor([-0.3107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 399000, Total Loss: 1.1650563948204906\n",
      "tensor([-0.3107], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 400000, Total Loss: 1.609464057444665\n",
      "tensor([-0.3108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 401000, Total Loss: 1.383216976141671\n",
      "tensor([-0.3108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 402000, Total Loss: 1.1893606736239082\n",
      "tensor([-0.3108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 403000, Total Loss: 1.2894742484930803\n",
      "tensor([-0.3108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 404000, Total Loss: 1.1996214352050412\n",
      "tensor([-0.3108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 405000, Total Loss: 1.2244820790547237\n",
      "tensor([-0.3108], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 406000, Total Loss: 1.5415560106706634\n",
      "tensor([-0.3109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 407000, Total Loss: 1.2217711132554485\n",
      "tensor([-0.3109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 408000, Total Loss: 1.2045992101105836\n",
      "tensor([-0.3109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 409000, Total Loss: 1.2131159311456905\n",
      "tensor([-0.3109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 410000, Total Loss: 1.2311009679763643\n",
      "tensor([-0.3109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 411000, Total Loss: 1.211882230467842\n",
      "tensor([-0.3109], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 412000, Total Loss: 1.1590975972483046\n",
      "tensor([-0.3110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 413000, Total Loss: 1.1840384610439716\n",
      "tensor([-0.3110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 414000, Total Loss: 1.1812087308805186\n",
      "tensor([-0.3110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 415000, Total Loss: 1.1865050158444876\n",
      "tensor([-0.3110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 416000, Total Loss: 1.1637598172965402\n",
      "tensor([-0.3110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 417000, Total Loss: 1.2658718540031508\n",
      "tensor([-0.3110], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 418000, Total Loss: 1.2677952975768054\n",
      "tensor([-0.3111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 419000, Total Loss: 1.1680530891645535\n",
      "tensor([-0.3111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 420000, Total Loss: 1.1654393160984624\n",
      "tensor([-0.3111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 421000, Total Loss: 1.200540274685542\n",
      "tensor([-0.3111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 422000, Total Loss: 1.2008235270928787\n",
      "tensor([-0.3111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 423000, Total Loss: 1.3127609296157996\n",
      "tensor([-0.3111], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 424000, Total Loss: 1.1735147480121169\n",
      "tensor([-0.3112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 425000, Total Loss: 1.53221078834125\n",
      "tensor([-0.3112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 426000, Total Loss: 1.2219546412405526\n",
      "tensor([-0.3112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 427000, Total Loss: 1.179534956105749\n",
      "tensor([-0.3112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 428000, Total Loss: 1.2121048194787611\n",
      "tensor([-0.3112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 429000, Total Loss: 3.5340293057541046\n",
      "tensor([-0.3112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 430000, Total Loss: 1.1695654251094134\n",
      "tensor([-0.3112], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 431000, Total Loss: 1.1580436858346985\n",
      "tensor([-0.3113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 432000, Total Loss: 1.4376093402065095\n",
      "tensor([-0.3113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 433000, Total Loss: 1.2000436020425254\n",
      "tensor([-0.3113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 434000, Total Loss: 1.6509696211802063\n",
      "tensor([-0.3113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 435000, Total Loss: 1.2761961088150957\n",
      "tensor([-0.3113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 436000, Total Loss: 1.1943320800818216\n",
      "tensor([-0.3113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 437000, Total Loss: 1.218816806173119\n",
      "tensor([-0.3113], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 438000, Total Loss: 1.1735043279870419\n",
      "tensor([-0.3114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 439000, Total Loss: 1.1600434311328507\n",
      "tensor([-0.3114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 440000, Total Loss: 1.2067407731011364\n",
      "tensor([-0.3114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 441000, Total Loss: 1.6305230696879534\n",
      "tensor([-0.3114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 442000, Total Loss: 1.234807840450833\n",
      "tensor([-0.3114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 443000, Total Loss: 1.230271298674601\n",
      "tensor([-0.3114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 444000, Total Loss: 1.2106872350334397\n",
      "tensor([-0.3114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 445000, Total Loss: 1.2244191828024626\n",
      "tensor([-0.3114], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 446000, Total Loss: 1.6437779769189604\n",
      "tensor([-0.3115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 447000, Total Loss: 1.1931347991774504\n",
      "tensor([-0.3115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 448000, Total Loss: 5.013935744663876\n",
      "tensor([-0.3115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 449000, Total Loss: 1.4925703246799995\n",
      "tensor([-0.3115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 450000, Total Loss: 1.1840223617093755\n",
      "tensor([-0.3115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 451000, Total Loss: 1.164325310823163\n",
      "tensor([-0.3115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 452000, Total Loss: 1.2007614884240712\n",
      "tensor([-0.3115], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 453000, Total Loss: 1.2333888655975018\n",
      "tensor([-0.3116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 454000, Total Loss: 1.1732093389610756\n",
      "tensor([-0.3116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 455000, Total Loss: 1.1955316389919004\n",
      "tensor([-0.3116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 456000, Total Loss: 1.219927284177496\n",
      "tensor([-0.3116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 457000, Total Loss: 1.735400160425947\n",
      "tensor([-0.3116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 458000, Total Loss: 1.527643395301348\n",
      "tensor([-0.3116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 459000, Total Loss: 2.010321875803631\n",
      "tensor([-0.3116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 460000, Total Loss: 1.2387500638482083\n",
      "tensor([-0.3116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 461000, Total Loss: 1.2680130015019124\n",
      "tensor([-0.3116], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 462000, Total Loss: 1.194905841008865\n",
      "tensor([-0.3117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 463000, Total Loss: 1.4058780912309952\n",
      "tensor([-0.3117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 464000, Total Loss: 1.2333797875550212\n",
      "tensor([-0.3117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 465000, Total Loss: 1.7524119038906116\n",
      "tensor([-0.3117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 466000, Total Loss: 1.193080407141385\n",
      "tensor([-0.3117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 467000, Total Loss: 1.2369943497623492\n",
      "tensor([-0.3117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 468000, Total Loss: 1.2079032580676858\n",
      "tensor([-0.3117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 469000, Total Loss: 1.1834553209362249\n",
      "tensor([-0.3117], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 470000, Total Loss: 1.3839841194207518\n",
      "tensor([-0.3118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 471000, Total Loss: 1.7286851023488405\n",
      "tensor([-0.3118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 472000, Total Loss: 1.2108997897759068\n",
      "tensor([-0.3118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 473000, Total Loss: 1.1824401407773624\n",
      "tensor([-0.3118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 474000, Total Loss: 1.6637675350128653\n",
      "tensor([-0.3118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 475000, Total Loss: 1.1727680224798511\n",
      "tensor([-0.3118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 476000, Total Loss: 1.2016811799256197\n",
      "tensor([-0.3118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 477000, Total Loss: 1.3297967766218544\n",
      "tensor([-0.3118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 478000, Total Loss: 1.3703166619274716\n",
      "tensor([-0.3118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 479000, Total Loss: 1.1948382980880594\n",
      "tensor([-0.3118], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 480000, Total Loss: 1.2858529206403044\n",
      "tensor([-0.3119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 481000, Total Loss: 1.2178788547940296\n",
      "tensor([-0.3119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 482000, Total Loss: 1.2155451744427483\n",
      "tensor([-0.3119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 483000, Total Loss: 1.579553942799296\n",
      "tensor([-0.3119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 484000, Total Loss: 1.1798068762310692\n",
      "tensor([-0.3119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 485000, Total Loss: 1.1819107994748748\n",
      "tensor([-0.3119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 486000, Total Loss: 1.160452318282109\n",
      "tensor([-0.3119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 487000, Total Loss: 1.2990127809986303\n",
      "tensor([-0.3119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 488000, Total Loss: 1.1752816333089793\n",
      "tensor([-0.3119], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 489000, Total Loss: 1.2918233763854425\n",
      "tensor([-0.3120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 490000, Total Loss: 1.1629836077035984\n",
      "tensor([-0.3120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 491000, Total Loss: 1.187107986743941\n",
      "tensor([-0.3120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 492000, Total Loss: 2.0556743092247824\n",
      "tensor([-0.3120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 493000, Total Loss: 1.1910563977646098\n",
      "tensor([-0.3120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 494000, Total Loss: 1.9283934093160309\n",
      "tensor([-0.3120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 495000, Total Loss: 1.2028672519507\n",
      "tensor([-0.3120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 496000, Total Loss: 1.4234521885048579\n",
      "tensor([-0.3120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 497000, Total Loss: 1.1823129832912147\n",
      "tensor([-0.3120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 498000, Total Loss: 1.296925326807098\n",
      "tensor([-0.3120], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 499000, Total Loss: 1.184832556215008\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 500000, Total Loss: 1.1881163988188008\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 501000, Total Loss: 1.1806405470030437\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 502000, Total Loss: 1.2857280037180148\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 503000, Total Loss: 2.127209051945482\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 504000, Total Loss: 1.1640653322093013\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 505000, Total Loss: 1.1967530667682393\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 506000, Total Loss: 1.5463279511712298\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 507000, Total Loss: 1.2435451492138792\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 508000, Total Loss: 1.1684805463120629\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 509000, Total Loss: 1.187718520140407\n",
      "tensor([-0.3121], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 510000, Total Loss: 1.1559480425588111\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 511000, Total Loss: 1.3667808541191784\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 512000, Total Loss: 1.1767977272588195\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 513000, Total Loss: 1.1779298282624042\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 514000, Total Loss: 1.4397489966996833\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 515000, Total Loss: 1.397208225887975\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 516000, Total Loss: 1.1646613600632043\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 517000, Total Loss: 1.1571032742079297\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 518000, Total Loss: 1.151496790929619\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 519000, Total Loss: 1.162133003080134\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 520000, Total Loss: 1.3092672806507524\n",
      "tensor([-0.3122], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 521000, Total Loss: 1.1836222881430971\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 522000, Total Loss: 1.1534874357664062\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 523000, Total Loss: 1.7415378689441845\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 524000, Total Loss: 1.1887845209459575\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 525000, Total Loss: 1.1776478566156878\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 526000, Total Loss: 1.1922078101634657\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 527000, Total Loss: 1.6925413473216424\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 528000, Total Loss: 1.23980337307292\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 529000, Total Loss: 1.5072000904777552\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 530000, Total Loss: 1.1704439663582722\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 531000, Total Loss: 1.1645115742790693\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 532000, Total Loss: 1.1538369784925044\n",
      "tensor([-0.3123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 533000, Total Loss: 1.1964505967518453\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 534000, Total Loss: 1.1627911378625855\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 535000, Total Loss: 1.2183365489474824\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 536000, Total Loss: 1.1809873339689216\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 537000, Total Loss: 1.1827924977283188\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 538000, Total Loss: 1.1670073890520616\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 539000, Total Loss: 1.3678819129208657\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 540000, Total Loss: 2.004425371005969\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 541000, Total Loss: 1.2304197435122637\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 542000, Total Loss: 1.1508075617136357\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 543000, Total Loss: 1.1495719741762682\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 544000, Total Loss: 1.270297599681713\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 545000, Total Loss: 1.2718832359433094\n",
      "tensor([-0.3124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 546000, Total Loss: 1.1541778682920827\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 547000, Total Loss: 1.1633645991731127\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 548000, Total Loss: 1.2006639409055315\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 549000, Total Loss: 1.2700951700783463\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 550000, Total Loss: 1.2326246201836992\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 551000, Total Loss: 1.2243873766518425\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 552000, Total Loss: 1.160268999875842\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 553000, Total Loss: 1.1980144795233896\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 554000, Total Loss: 1.1555493601968705\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 555000, Total Loss: 1.2238560660260873\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 556000, Total Loss: 1.248335129554375\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 557000, Total Loss: 1.2131751265012733\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 558000, Total Loss: 1.1697994285631912\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 559000, Total Loss: 1.166831854211251\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 560000, Total Loss: 1.3061030498783535\n",
      "tensor([-0.3125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 561000, Total Loss: 1.2060951351344273\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 562000, Total Loss: 1.1651843982691927\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 563000, Total Loss: 1.2033657848496637\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 564000, Total Loss: 1.1534457976191117\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 565000, Total Loss: 1.1595060343221473\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 566000, Total Loss: 1.1970360866607608\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 567000, Total Loss: 1.1535861891745218\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 568000, Total Loss: 1.3482313318086392\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 569000, Total Loss: 1.2041231331905438\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 570000, Total Loss: 1.2921290116334752\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 571000, Total Loss: 1.1800302238006892\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 572000, Total Loss: 1.1741661407359953\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 573000, Total Loss: 1.2365894359475846\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 574000, Total Loss: 1.1750744180063992\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 575000, Total Loss: 1.1500354929654681\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 576000, Total Loss: 1.146802040196146\n",
      "tensor([-0.3126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 577000, Total Loss: 2.80036845991403\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 578000, Total Loss: 1.165521337673783\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 579000, Total Loss: 1.4192050518438157\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 580000, Total Loss: 1.4920618644703836\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 581000, Total Loss: 1.1447100321970498\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 582000, Total Loss: 1.3165176761037287\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 583000, Total Loss: 1.1575558745430743\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 584000, Total Loss: 1.149696868715761\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 585000, Total Loss: 1.173703580355432\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 586000, Total Loss: 2.1047417780446818\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 587000, Total Loss: 1.2928547840105709\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 588000, Total Loss: 1.1446368365719986\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 589000, Total Loss: 1.221713944249677\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 590000, Total Loss: 1.1950905173882842\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 591000, Total Loss: 1.7336140778078681\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 592000, Total Loss: 1.2516499618658015\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 593000, Total Loss: 1.1698854558633784\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 594000, Total Loss: 1.1660792415742176\n",
      "tensor([-0.3127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 595000, Total Loss: 1.1741175189141566\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 596000, Total Loss: 1.1980976330465214\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 597000, Total Loss: 1.1481922076767834\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 598000, Total Loss: 1.271425483642787\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 599000, Total Loss: 1.1467043900732021\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 600000, Total Loss: 1.1522062358947511\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 601000, Total Loss: 1.2437117875043735\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 602000, Total Loss: 1.163225881574985\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 603000, Total Loss: 1.5178939093859858\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 604000, Total Loss: 1.157027032556746\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 605000, Total Loss: 1.4466661465123394\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 606000, Total Loss: 1.1766134332863458\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 607000, Total Loss: 1.1581665899091187\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 608000, Total Loss: 1.218321169536655\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 609000, Total Loss: 1.147430087254834\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 610000, Total Loss: 1.20203043254046\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 611000, Total Loss: 1.3735592810457982\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 612000, Total Loss: 1.761395467985586\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 613000, Total Loss: 1.3943758689851042\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 614000, Total Loss: 1.1789888045315813\n",
      "tensor([-0.3128], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 615000, Total Loss: 1.1765488044782302\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 616000, Total Loss: 1.2122274954781787\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 617000, Total Loss: 1.2318594965035832\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 618000, Total Loss: 1.2110315971204832\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 619000, Total Loss: 1.2123940751606632\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 620000, Total Loss: 1.1746151173177515\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 621000, Total Loss: 1.1995184164911314\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 622000, Total Loss: 1.3432836450414931\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 623000, Total Loss: 1.1820043577674733\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 624000, Total Loss: 1.1703590501550087\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 625000, Total Loss: 1.2709814755177997\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 626000, Total Loss: 1.1555131414780968\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 627000, Total Loss: 1.1400601950273022\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 628000, Total Loss: 1.2132492085873883\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 629000, Total Loss: 1.1386745699421201\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 630000, Total Loss: 1.1982833783214508\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 631000, Total Loss: 1.1997741885473894\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 632000, Total Loss: 1.1526447311801704\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 633000, Total Loss: 1.1679663334001247\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 634000, Total Loss: 1.5568815947023051\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 635000, Total Loss: 1.156892106514957\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 636000, Total Loss: 1.159854951090439\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 637000, Total Loss: 1.5647813960459815\n",
      "tensor([-0.3129], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 638000, Total Loss: 1.183731568810897\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 639000, Total Loss: 1.1520405614854987\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 640000, Total Loss: 1.1499373330156535\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 641000, Total Loss: 1.1473732478386385\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 642000, Total Loss: 1.2607458124857454\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 643000, Total Loss: 1.1819668070810954\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 644000, Total Loss: 1.1585123986589922\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 645000, Total Loss: 1.1505316499235676\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 646000, Total Loss: 1.18505956031739\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 647000, Total Loss: 1.2374594429943193\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 648000, Total Loss: 1.2167150932969228\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 649000, Total Loss: 2.287250553888226\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 650000, Total Loss: 1.1708519739335574\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 651000, Total Loss: 1.1577873866177237\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 652000, Total Loss: 1.1605222439159562\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 653000, Total Loss: 1.6154559166124933\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 654000, Total Loss: 1.167587034622258\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 655000, Total Loss: 1.162914083289833\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 656000, Total Loss: 1.50142178308441\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 657000, Total Loss: 1.8453399702718798\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 658000, Total Loss: 1.5084564899283492\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 659000, Total Loss: 1.1786133970744883\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 660000, Total Loss: 1.174272459684831\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 661000, Total Loss: 1.2015495079091483\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 662000, Total Loss: 1.1933593575795785\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 663000, Total Loss: 1.1910870475082205\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 664000, Total Loss: 1.4181009846078614\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 665000, Total Loss: 1.7148378569451161\n",
      "tensor([-0.3130], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 666000, Total Loss: 1.1606001573353235\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 667000, Total Loss: 1.2605026378724682\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 668000, Total Loss: 1.146356411859907\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 669000, Total Loss: 1.714230903993804\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 670000, Total Loss: 1.1456066039849113\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 671000, Total Loss: 1.2736806077576714\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 672000, Total Loss: 1.3274461026744728\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 673000, Total Loss: 1.1755379786680287\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 674000, Total Loss: 1.588541526744699\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 675000, Total Loss: 1.1782609853934798\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 676000, Total Loss: 1.2773033315010147\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 677000, Total Loss: 1.5487848220030904\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 678000, Total Loss: 1.1932623029350897\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 679000, Total Loss: 1.2321952897221014\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 680000, Total Loss: 1.1631391384946324\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 681000, Total Loss: 1.3221775457115086\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 682000, Total Loss: 1.2250190781486228\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 683000, Total Loss: 1.168990186618067\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 684000, Total Loss: 1.1698391083837996\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 685000, Total Loss: 1.2675274879983938\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 686000, Total Loss: 1.1609978382127955\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 687000, Total Loss: 1.603213244405043\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 688000, Total Loss: 1.179261739938179\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 689000, Total Loss: 1.283254070806378\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 690000, Total Loss: 1.1744817672081538\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 691000, Total Loss: 1.2042782029607801\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 692000, Total Loss: 1.1718414872172715\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 693000, Total Loss: 1.220853232592763\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 694000, Total Loss: 1.2451473414053185\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 695000, Total Loss: 1.176965836969272\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 696000, Total Loss: 1.2422588937110477\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 697000, Total Loss: 1.2319849036790984\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 698000, Total Loss: 1.3010232821056558\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 699000, Total Loss: 1.3507576855741994\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 700000, Total Loss: 1.2317908938428692\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 701000, Total Loss: 1.2025446510902698\n",
      "tensor([-0.3131], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 702000, Total Loss: 1.1656226373600953\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 703000, Total Loss: 1.176388236480588\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 704000, Total Loss: 1.2117334731180733\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 705000, Total Loss: 1.1428047767059033\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 706000, Total Loss: 1.2819328068609788\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 707000, Total Loss: 2.007129700557764\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 708000, Total Loss: 1.1765534329480813\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 709000, Total Loss: 1.1972337308503846\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 710000, Total Loss: 1.2652071464096104\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 711000, Total Loss: 1.1740178762924856\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 712000, Total Loss: 1.1583232814652666\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 713000, Total Loss: 1.6483578337557026\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 714000, Total Loss: 1.1831787413938357\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 715000, Total Loss: 1.1526247052828449\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 716000, Total Loss: 1.1634665755456162\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 717000, Total Loss: 1.1810122499097782\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 718000, Total Loss: 1.1813611423546557\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 719000, Total Loss: 1.1713981267195488\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 720000, Total Loss: 1.1593750572591703\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 721000, Total Loss: 1.1737158259487868\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 722000, Total Loss: 1.1898703615412436\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 723000, Total Loss: 1.1477322886244423\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 724000, Total Loss: 1.144861459561242\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 725000, Total Loss: 1.1450190238368014\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 726000, Total Loss: 1.677562628693511\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 727000, Total Loss: 1.1490948649153623\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 728000, Total Loss: 1.580662000034943\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 729000, Total Loss: 1.3196823930385457\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 730000, Total Loss: 1.3691909676057765\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 731000, Total Loss: 1.1749884672827087\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 732000, Total Loss: 1.164902826291372\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 733000, Total Loss: 1.2333271945999753\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 734000, Total Loss: 1.1741100838530465\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 735000, Total Loss: 1.3066972560193442\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 736000, Total Loss: 1.1861344933729243\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 737000, Total Loss: 1.2284387939612484\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 738000, Total Loss: 3.4419240253708026\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 739000, Total Loss: 1.1665664524189103\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 740000, Total Loss: 1.245709903760323\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 741000, Total Loss: 1.1512078204208256\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 742000, Total Loss: 1.4439816569604962\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 743000, Total Loss: 1.1719788788294987\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 744000, Total Loss: 1.3375990902343975\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 745000, Total Loss: 1.214711579572166\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 746000, Total Loss: 1.184074979545928\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 747000, Total Loss: 1.1641495209544022\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 748000, Total Loss: 1.1759795066970167\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 749000, Total Loss: 1.172581025944983\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 750000, Total Loss: 1.154111488251297\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 751000, Total Loss: 1.1398718033421056\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 752000, Total Loss: 1.141828227580494\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 753000, Total Loss: 1.1270881285054895\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 754000, Total Loss: 1.1383812869146135\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 755000, Total Loss: 1.1178453820236736\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 756000, Total Loss: 1.1153628878365567\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 757000, Total Loss: 1.1211971630284543\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 758000, Total Loss: 1.10866456335976\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 759000, Total Loss: 1.1143535314031383\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 760000, Total Loss: 1.2209691692372053\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 761000, Total Loss: 1.2519911033972282\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 762000, Total Loss: 1.1980513698304336\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 763000, Total Loss: 1.3468766282905\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 764000, Total Loss: 1.2404598196163354\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 765000, Total Loss: 1.1367981292717089\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 766000, Total Loss: 1.1435607028561199\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 767000, Total Loss: 1.224989566046768\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 768000, Total Loss: 1.2283726380637803\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 769000, Total Loss: 1.252678314453944\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 770000, Total Loss: 1.181643865008105\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 771000, Total Loss: 1.1586607490306158\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 772000, Total Loss: 1.2429315486333077\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 773000, Total Loss: 1.2324958173009546\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 774000, Total Loss: 1.1764258140635544\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 775000, Total Loss: 1.1712579791500521\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 776000, Total Loss: 1.1674307163516817\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 777000, Total Loss: 1.3940093570944474\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 778000, Total Loss: 1.1551975546118096\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 779000, Total Loss: 1.1700816251049266\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 780000, Total Loss: 1.1609533765023503\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 781000, Total Loss: 1.2328585673236236\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 782000, Total Loss: 1.1522456415817408\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 783000, Total Loss: 1.3730252196313364\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 784000, Total Loss: 1.3021083706999523\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 785000, Total Loss: 1.1773910815505464\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 786000, Total Loss: 1.1544283561562647\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 787000, Total Loss: 1.5133265827794653\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 788000, Total Loss: 1.3037853866609728\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 789000, Total Loss: 1.2479093845142593\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 790000, Total Loss: 1.1824556779810707\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 791000, Total Loss: 1.439013568941903\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 792000, Total Loss: 1.1801999453227556\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 793000, Total Loss: 1.1979222076730394\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 794000, Total Loss: 1.201453811420392\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 795000, Total Loss: 1.8905225417356941\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 796000, Total Loss: 1.1639512521791724\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 797000, Total Loss: 1.3898750440055438\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 798000, Total Loss: 1.2190326996292544\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 799000, Total Loss: 1.1844874098526752\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 800000, Total Loss: 1.4072680774510817\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 801000, Total Loss: 1.3249068781593816\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 802000, Total Loss: 1.2363627519015872\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 803000, Total Loss: 1.1696579423657045\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 804000, Total Loss: 1.3027285546102578\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 805000, Total Loss: 1.164856738470917\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0127], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 806000, Total Loss: 1.3380378392920214\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 807000, Total Loss: 1.2310113123085908\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 808000, Total Loss: 1.2219865033348982\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 809000, Total Loss: 1.1515104568119794\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 810000, Total Loss: 1.2181228724268414\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 811000, Total Loss: 1.3490834641618206\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 812000, Total Loss: 1.2493540187925574\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 813000, Total Loss: 1.165395281280202\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 814000, Total Loss: 1.2387768501589298\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 815000, Total Loss: 1.2093510937630139\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 816000, Total Loss: 1.2262400449089832\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 817000, Total Loss: 1.413052096759347\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 818000, Total Loss: 1.1807725079736278\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 819000, Total Loss: 1.8170680248104223\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 820000, Total Loss: 1.219425790440662\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 821000, Total Loss: 1.166105576035816\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 822000, Total Loss: 1.1475754063396646\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 823000, Total Loss: 1.181204670526447\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 824000, Total Loss: 1.1535016863294103\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 825000, Total Loss: 1.1699601940978694\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 826000, Total Loss: 1.2366738694295893\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 827000, Total Loss: 1.2196990396340186\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 828000, Total Loss: 1.2100615701613155\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 829000, Total Loss: 1.3226124345175787\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 830000, Total Loss: 1.1793897997042735\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 831000, Total Loss: 1.1508026025252873\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 832000, Total Loss: 1.2312010962803237\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 833000, Total Loss: 1.2077220339954244\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 834000, Total Loss: 1.1550210959075768\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 835000, Total Loss: 1.3686069476639995\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 836000, Total Loss: 1.1909239394716706\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 837000, Total Loss: 1.1567492563218837\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 838000, Total Loss: 1.1687206464822717\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 839000, Total Loss: 1.1844002733358356\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 840000, Total Loss: 1.1637960738524238\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 841000, Total Loss: 1.1717087328651645\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 842000, Total Loss: 1.1348565736966052\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 843000, Total Loss: 1.135128054883587\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 844000, Total Loss: 1.1166749094319712\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 845000, Total Loss: 1.109450790282112\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 846000, Total Loss: 1.1567654424543634\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 847000, Total Loss: 1.1085159985180004\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 848000, Total Loss: 1.1112884160152308\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 849000, Total Loss: 1.1015809013178388\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 850000, Total Loss: 1.1049793407330735\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 851000, Total Loss: 1.1034908027065455\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 852000, Total Loss: 1.096829727438537\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 853000, Total Loss: 1.1659057833766402\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 854000, Total Loss: 1.1051924144292766\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 855000, Total Loss: 1.0975788782825884\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 856000, Total Loss: 1.094392351220652\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 857000, Total Loss: 1.1020880386923573\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 858000, Total Loss: 1.098667284956372\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 859000, Total Loss: 1.0949879121582624\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 860000, Total Loss: 1.1005329552165237\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 861000, Total Loss: 1.1056925647598794\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 862000, Total Loss: 1.0991000294417506\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 863000, Total Loss: 1.11915786452094\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 864000, Total Loss: 1.0930103161048899\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 865000, Total Loss: 1.0943391525079715\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 866000, Total Loss: 1.0951026748179065\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 867000, Total Loss: 1.0980362365878282\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 868000, Total Loss: 1.093398950012717\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0126], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 869000, Total Loss: 1.1376282324255107\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 870000, Total Loss: 1.1402211123824872\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 871000, Total Loss: 1.1976290914116632\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 872000, Total Loss: 1.1546816125131856\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 873000, Total Loss: 1.1031020965725495\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 874000, Total Loss: 1.1758151940157546\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 875000, Total Loss: 1.1148762975281723\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 876000, Total Loss: 1.1155856472170607\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 877000, Total Loss: 1.0975541391722201\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 878000, Total Loss: 1.0904520026956828\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 879000, Total Loss: 1.1042346898084272\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 880000, Total Loss: 1.114424361667175\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 881000, Total Loss: 1.0872601645952409\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 882000, Total Loss: 1.7837587293046215\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 883000, Total Loss: 1.180397719346785\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 884000, Total Loss: 1.1522007562802332\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 885000, Total Loss: 1.1218373526940655\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 886000, Total Loss: 1.1104947814892194\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 887000, Total Loss: 1.1106314657181184\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 888000, Total Loss: 1.0987039718619285\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 889000, Total Loss: 1.0910991337902705\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 890000, Total Loss: 1.1047582568796361\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 891000, Total Loss: 1.0890521753080187\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 892000, Total Loss: 1.0934688780828206\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 893000, Total Loss: 1.0879766447476797\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 894000, Total Loss: 1.094932885985274\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 895000, Total Loss: 1.1439115005681912\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 896000, Total Loss: 1.1230163501093582\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 897000, Total Loss: 1.138357463174246\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 898000, Total Loss: 1.1340024128929032\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 899000, Total Loss: 1.3515579638981479\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 900000, Total Loss: 1.3097430146879114\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 901000, Total Loss: 1.1763100047605022\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 902000, Total Loss: 1.45529030443076\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 903000, Total Loss: 1.2124248952013033\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 904000, Total Loss: 1.1699519182842049\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 905000, Total Loss: 1.1583209216910884\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 906000, Total Loss: 1.1752121069805923\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 907000, Total Loss: 1.2103135520402413\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 908000, Total Loss: 1.227100231746501\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 909000, Total Loss: 1.2474414981907513\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 910000, Total Loss: 1.2197573969841835\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 911000, Total Loss: 1.499342805471352\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 912000, Total Loss: 1.1571246753713709\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 913000, Total Loss: 1.196588051042738\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 914000, Total Loss: 1.1849759240674322\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 915000, Total Loss: 1.3188939199428311\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 916000, Total Loss: 2.318245742593067\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 917000, Total Loss: 1.2185993219036542\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 918000, Total Loss: 1.3064360272414663\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 919000, Total Loss: 5.016682305939735\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 920000, Total Loss: 1.1563194717700633\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 921000, Total Loss: 1.1698875669746238\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 922000, Total Loss: 1.1798009424288471\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 923000, Total Loss: 1.13733161967415\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 924000, Total Loss: 1.154571584931905\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 925000, Total Loss: 1.5328607595168522\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 926000, Total Loss: 1.156977861643538\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0125], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 927000, Total Loss: 1.225555774403736\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 928000, Total Loss: 1.8723354426120897\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 929000, Total Loss: 1.201391918902552\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 930000, Total Loss: 1.181131633509053\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 931000, Total Loss: 1.2236371500119854\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 932000, Total Loss: 1.3296837706287878\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 933000, Total Loss: 1.220078573382262\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 934000, Total Loss: 1.1654332847592044\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 935000, Total Loss: 1.201209788031672\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 936000, Total Loss: 1.2011223932673651\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 937000, Total Loss: 1.171645066411871\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 938000, Total Loss: 1.1499458214171248\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 939000, Total Loss: 1.1663148369279408\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 940000, Total Loss: 1.1283397478124881\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 941000, Total Loss: 1.2264265347516987\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 942000, Total Loss: 1.1693385159027985\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 943000, Total Loss: 1.2635904491310643\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 944000, Total Loss: 1.1904090496405455\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 945000, Total Loss: 1.159561158574348\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 946000, Total Loss: 1.1740031741027892\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 947000, Total Loss: 1.1820453549010381\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 948000, Total Loss: 1.186243673910807\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 949000, Total Loss: 1.2499385472737812\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 950000, Total Loss: 1.552092521853647\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 951000, Total Loss: 1.7408987794405457\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 952000, Total Loss: 1.1729598061034339\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 953000, Total Loss: 1.1718539221111426\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 954000, Total Loss: 1.1954627106593874\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 955000, Total Loss: 1.1738434498882069\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 956000, Total Loss: 1.2534072894493984\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 957000, Total Loss: 1.2070418380385897\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 958000, Total Loss: 1.1677073033728775\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 959000, Total Loss: 1.2425039789278012\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 960000, Total Loss: 1.2678043643739163\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 961000, Total Loss: 1.1845756855238228\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 962000, Total Loss: 1.205034607689091\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 963000, Total Loss: 1.2294581320670441\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 964000, Total Loss: 1.1731833474512054\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 965000, Total Loss: 1.3080697051191135\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 966000, Total Loss: 1.1860937063726615\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 967000, Total Loss: 1.209484881080672\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 968000, Total Loss: 1.8158277122890798\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 969000, Total Loss: 1.172204320567603\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 970000, Total Loss: 1.1666999576809833\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 971000, Total Loss: 1.24014079882006\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 972000, Total Loss: 1.1472369642906295\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 973000, Total Loss: 1.1685399824531175\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 974000, Total Loss: 1.3289058411768566\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 975000, Total Loss: 1.6614029113905817\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 976000, Total Loss: 1.2321347217568699\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 977000, Total Loss: 1.150800811036313\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 978000, Total Loss: 1.131083954296746\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 979000, Total Loss: 1.4054767349212065\n",
      "tensor([-0.3133], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 980000, Total Loss: 2.038036029212887\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 981000, Total Loss: 1.367794575427176\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 982000, Total Loss: 1.3466927956883046\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 983000, Total Loss: 1.2189299487540777\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0124], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 984000, Total Loss: 1.1422457749746813\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 985000, Total Loss: 1.1932587788182274\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 986000, Total Loss: 1.215112087473001\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 987000, Total Loss: 1.5010755941268437\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 988000, Total Loss: 1.3679475459068302\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 989000, Total Loss: 1.1977119268750946\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 990000, Total Loss: 1.1932433755329277\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 991000, Total Loss: 1.3040335208750966\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 992000, Total Loss: 1.1719526272191148\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 993000, Total Loss: 1.133947103431411\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 994000, Total Loss: 1.1337580467633728\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 995000, Total Loss: 1.1902311414177889\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 996000, Total Loss: 1.8408522355355572\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 997000, Total Loss: 1.1713140478572766\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 998000, Total Loss: 1.1603810256221008\n",
      "tensor([-0.3132], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "tensor([-0.0123], dtype=torch.float64, grad_fn=<SelectBackward0>)\n",
      "Epoch 999000, Total Loss: 1.1933489931398082\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if __name__=='__main__':\n",
    "\n",
    "    model_fast  = fast_system_PINN().to(torch.float64)  \n",
    "    model_slow  = slow_system_PINN().to(torch.float64)  \n",
    "    model_fast2 = fast_system_PINN2().to(torch.float64) \n",
    "\n",
    "    optimizer = torch.optim.Adam(list(model_fast.parameters()) +\\\n",
    "                                 list(model_slow.parameters()) +\\\n",
    "                                 list(model_fast2.parameters()), lr=1e-3)\n",
    "    loss_values = []\n",
    "    epoch_num = 1000000\n",
    "\n",
    "    #xf2_end, yf2_end =  np.random.uniform(1, 2) , np.random.uniform(-1, 0) #-1, 2 #\n",
    "\n",
    "    for epoch in range(epoch_num):\n",
    "        optimizer.zero_grad()\n",
    "        loss_total = total_loss_func(model_fast, model_slow, model_fast2,\\\n",
    "                                    t_tensor, tau_tensor, t2_tensor,\\\n",
    "                                    phi_init, c1_init, c2_init, w_init,\\\n",
    "                                    phi_slow_init, c1_slow_init, c2_slow_init, w_slow_init,\\\n",
    "                                    phi_end, c1_end, c2_end, w_end,\\\n",
    "                                    phi_slow_end, c1_slow_end, c2_slow_end, w_slow_end,\\\n",
    "                                    eps, weight_fast=1.0, weight_slow=1.0)\n",
    "        loss_total.backward()#(retain_graph=True)\n",
    "        optimizer.step()\n",
    "        with torch.no_grad():\n",
    "            phi_pred_fast, u_pred_fast, c1_pred_fast, c2_pred_fast, j1_pred_fast, j2_pred_fast, w_pred_fast = model_fast(t_tensor).numpy().T\n",
    "            phi_pred_slow, u_pred_slow, c1_pred_slow, c2_pred_slow, j1_pred_slow, j2_pred_slow, w_pred_slow = model_slow(tau_tensor).numpy().T\n",
    "            phi_pred_fast2, u_pred_fast2, c1_pred_fast2, c2_pred_fast2, j1_pred_fast2, j2_pred_fast2, w_pred_fast2 = model_fast2(t2_tensor).numpy().T\n",
    "            #J1, J2   = j1_pred_slow[0], j2_pred_slow[0]\n",
    "            #u_a, u_b = u_pred_fast[-1], u_pred_fast2[-1]\n",
    "\n",
    "        if epoch % 1000 == 0:\n",
    "            print(f'Epoch {epoch}, Total Loss: {loss_total.item()}') \n",
    "        loss_values.append(loss_total.item())\n",
    "    import matplotlib.pyplot as plt\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    plt.plot(range(0, epoch_num, 1000), np.log(loss_values[:epoch_num//1000]), 'b', label='Fast System')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Log(Loss)')\n",
    "    plt.title('Training Loss Over Epochs (Fast System)')\n",
    "    plt.legend()\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "    # Model evaluation\n",
    "    model_fast.eval()\n",
    "    model_slow.eval()\n",
    "    model_fast2.eval()\n",
    "    with torch.no_grad():\n",
    "        # Predictions for fast system\n",
    "        phi_pred_fast, u_pred_fast, c1_pred_fast, c2_pred_fast, j1_pred_fast, j2_pred_fast, w_pred_fast = model_fast(t_tensor).numpy().T\n",
    "        phi_pred_slow, u_pred_slow, c1_pred_slow, c2_pred_slow, j1_pred_slow, j2_pred_slow, w_pred_slow = model_slow(tau_tensor).numpy().T\n",
    "        phi_pred_fast2, u_pred_fast2, c1_pred_fast2, c2_pred_fast2, j1_pred_fast2, j2_pred_fast2, w_pred_fast2 = model_fast2(t2_tensor).numpy().T\n",
    "             \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e63b025f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T17:21:59.015182Z",
     "iopub.status.busy": "2024-06-09T17:21:59.014589Z",
     "iopub.status.idle": "2024-06-09T17:21:59.860166Z",
     "shell.execute_reply": "2024-06-09T17:21:59.858850Z"
    },
    "papermill": {
     "duration": 0.950571,
     "end_time": "2024-06-09T17:21:59.862899",
     "exception": false,
     "start_time": "2024-06-09T17:21:58.912328",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(u_pred_fast[0], j1_pred_fast[0], 'go', label='Initial point')\n",
    "# Plot numerical (fast)\n",
    "plt.plot(u_pred_fast, j1_pred_fast, 'b--', label='Numerical (Fast)')\n",
    "plt.plot(u_pred_slow, j1_pred_slow, 'r--', label='Numerical (Slow)')\n",
    "plt.plot(u_pred_fast2, j1_pred_fast2, 'm--', label='Numerical (Fast)')#, alpha=0.5)\n",
    "\n",
    "# Plot ending point\n",
    "plt.plot(u_pred_fast2[0], j1_pred_fast2[0], 'ro', label='Ending point')\n",
    "plt.xlabel('$u$')\n",
    "plt.ylabel('$J_1$')\n",
    "#plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(u_pred_fast[0], j2_pred_fast[0], 'go', label='Initial point')\n",
    "# Plot numerical (fast)\n",
    "plt.plot(u_pred_fast, j2_pred_fast, 'b--', label='Numerical (Fast)')\n",
    "plt.plot(u_pred_slow, j2_pred_slow, 'r--', label='Numerical (Slow)')\n",
    "plt.plot(u_pred_fast2, j2_pred_fast2, 'm--', label='Numerical (Fast)')#, alpha=0.5)\n",
    "\n",
    "# Plot ending point\n",
    "plt.plot(u_pred_fast2[0], j2_pred_fast2[0], 'ro', label='Ending point')\n",
    "plt.legend()\n",
    "plt.xlabel('$u$')\n",
    "plt.ylabel('$J_2$')\n",
    "\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7cbf0a08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T17:22:00.068866Z",
     "iopub.status.busy": "2024-06-09T17:22:00.068482Z",
     "iopub.status.idle": "2024-06-09T17:22:00.076543Z",
     "shell.execute_reply": "2024-06-09T17:22:00.075265Z"
    },
    "papermill": {
     "duration": 0.115389,
     "end_time": "2024-06-09T17:22:00.079637",
     "exception": false,
     "start_time": "2024-06-09T17:21:59.964248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.25614310720588573\n",
      "0.2433960433429736\n",
      "(100,)\n",
      "-0.3132288224686828\n",
      "-0.31323095482493385\n",
      "\n",
      "0.2027489454068405\n",
      "0.1965493736170894\n",
      "\n",
      "0.25640033372112214\n",
      "0.2560880330952594\n"
     ]
    }
   ],
   "source": [
    "print(J1)\n",
    "print(J2)\n",
    "print(j1_pred_fast.shape)\n",
    "print(j1_pred_fast[0])\n",
    "print(j1_pred_fast[-1])\n",
    "print('')\n",
    "\n",
    "print(j1_pred_slow[0])\n",
    "print(j1_pred_slow[-1])\n",
    "print('')\n",
    "\n",
    "print(j1_pred_fast2[0])\n",
    "print(j1_pred_fast2[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "beb1e25e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T17:22:00.285179Z",
     "iopub.status.busy": "2024-06-09T17:22:00.284752Z",
     "iopub.status.idle": "2024-06-09T17:22:02.997547Z",
     "shell.execute_reply": "2024-06-09T17:22:02.996392Z"
    },
    "papermill": {
     "duration": 2.819015,
     "end_time": "2024-06-09T17:22:03.000478",
     "exception": false,
     "start_time": "2024-06-09T17:22:00.181463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.plot(t, u_pred_fast, '--', color='blue', label='Predicted $u$')\n",
    "plt.xlabel('$x$')\n",
    "plt.ylabel('$u$')\n",
    "plt.title(' Over the first piece')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.plot(tau, u_pred_slow + u_pred_fast[-1], '--', color='blue', label='Predicted $u$')\n",
    "plt.xlabel('$x$')\n",
    "plt.ylabel('$u$')\n",
    "plt.title(' Over the slow manifold')\n",
    "plt.legend()\n",
    "\n",
    "\n",
    "plt.subplot(1, 3, 3)\n",
    "plt.plot(t2, u_pred_fast2 , '--', color='blue', label='Predicted $u$')\n",
    "plt.xlabel('$x$')\n",
    "plt.ylabel('$u$')\n",
    "plt.title(' Over the 3rd piece')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "########\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.plot(t, j1_pred_fast, 'r--', label='Predicted $J_1$')\n",
    "plt.xlabel('$x$')\n",
    "plt.ylabel('$J_1$')\n",
    "plt.title(' Over the first piece')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.plot(tau, j1_pred_slow + j1_pred_fast[-1], 'r--', label='Predicted $J_1$')\n",
    "plt.xlabel('$x$')\n",
    "plt.ylabel('$J_1$')\n",
    "plt.title('  Over the slow manifold')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 3, 3)\n",
    "plt.plot(t2, j1_pred_fast2 , 'r--', label='Predicted $J_1$')\n",
    "plt.xlabel('$x$')\n",
    "plt.ylabel('$J_1$')\n",
    "plt.title(' Over the 3rd piece')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "########\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.plot(t, j2_pred_fast, 'm--', label='Predicted $J_2$')\n",
    "plt.xlabel('$t$')\n",
    "plt.ylabel('$J_2$')\n",
    "plt.title(' Over the first piece')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.plot(tau, j2_pred_slow + j2_pred_fast[-1], 'm--', label='Predicted $J_2$')\n",
    "plt.xlabel('$x$')\n",
    "plt.ylabel('$J_2$')\n",
    "plt.title(' Over the slow manifold')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 3, 3)\n",
    "plt.plot(t2, j2_pred_fast2 , 'm--', label='Predicted $J_2$')\n",
    "plt.xlabel('$t$')\n",
    "plt.ylabel('$J_2$')\n",
    "plt.title(' Over the 3rd piece')\n",
    "plt.legend()\n",
    "\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6bff08c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T17:22:03.210300Z",
     "iopub.status.busy": "2024-06-09T17:22:03.209875Z",
     "iopub.status.idle": "2024-06-09T17:22:04.163257Z",
     "shell.execute_reply": "2024-06-09T17:22:04.162005Z"
    },
    "papermill": {
     "duration": 1.062463,
     "end_time": "2024-06-09T17:22:04.166130",
     "exception": false,
     "start_time": "2024-06-09T17:22:03.103667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.plot(t, z1 * c1_pred_fast + z2 * c2_pred_fast, 'm--')\n",
    "plt.xlabel('$t$')\n",
    "plt.ylabel('$z_1 c_1+ z_2  c_2$')\n",
    "plt.title(' Over the first piece')\n",
    "plt.legend()\n",
    "\n",
    "zc_slow_init = z1 * c1_pred_fast[-1] + z2 * c2_pred_fast[-1]\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.plot(tau, z1 * c1_pred_slow + z2 * c2_pred_slow + zc_slow_init, 'm--')\n",
    "plt.xlabel('$x$')\n",
    "plt.ylabel('$z_1 c_1+ z_2  c_2$')\n",
    "plt.title(' Over the slow manifold')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 3, 3)\n",
    "plt.plot(t2, z1 * c1_pred_fast2 + z2 * c2_pred_fast2 , 'm--')\n",
    "plt.xlabel('$t$')\n",
    "plt.ylabel('$z_1 c_1+ z_2  c_2$')\n",
    "plt.title(' Over the 3rd piece')\n",
    "plt.legend()\n",
    "\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d1552f1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T17:22:04.380482Z",
     "iopub.status.busy": "2024-06-09T17:22:04.380040Z",
     "iopub.status.idle": "2024-06-09T17:22:04.689141Z",
     "shell.execute_reply": "2024-06-09T17:22:04.687941Z"
    },
    "papermill": {
     "duration": 0.418819,
     "end_time": "2024-06-09T17:22:04.692294",
     "exception": false,
     "start_time": "2024-06-09T17:22:04.273475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "fig = plt.figure(figsize=(12, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "\n",
    "ax.plot(w_init, u_pred_fast[0], z1 * c1_init + z2 * c2_init, 'go', label='Initial point')\n",
    "\n",
    "ax.plot(w_pred_fast, u_pred_fast, z1 * c1_pred_fast + z2 * c2_pred_fast, 'b--', label='Numerical (Fast)')\n",
    "\n",
    "\n",
    "ax.plot(w_pred_slow + w_pred_fast[-1],\\\n",
    "        u_pred_slow + u_a,\\\n",
    "        z1 * c1_pred_slow + z2 * c2_pred_slow + z1 * c1_slow_init + z2 * c2_slow_init,\\\n",
    "        'k--', label='Numerical (Slow)', alpha=0.5)\n",
    "\n",
    "ax.plot(w_end, u_pred_fast2[0], z1 * c1_end + z2 * c2_end, 'ro', label='Ending point')\n",
    "\n",
    "ax.plot(w_pred_fast2 , u_pred_fast2 , z1 * c1_pred_fast2 + z2 * c2_pred_fast2 ,\\\n",
    "                                        'm--', label='Numerical (Fast)', alpha=0.5)\n",
    "\n",
    "ax.set_xlabel('X')\n",
    "ax.set_ylabel('U')\n",
    "ax.set_zlabel('$z_1 c_1 + z_2 c_2$')\n",
    "#ax.set_title('Combined Fast and Slow Systems')\n",
    "ax.legend()\n",
    "ax.invert_yaxis()\n",
    "\n",
    "# Set bounds for x, y, and z-axes\n",
    "#ax.set_xlim(0, 1.1)\n",
    "#ax.set_ylim(0, 1.1)\n",
    "#ax.set_zlim(0, 1.1)\n",
    "\n",
    "# Rotating the figure by 20 degrees\n",
    "ax.view_init(elev=20, azim=80)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30715,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13659.881008,
   "end_time": "2024-06-09T17:22:06.055283",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-09T13:34:26.174275",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
